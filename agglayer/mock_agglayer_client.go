// Code generated by mockery v2.45.0. DO NOT EDIT.

package agglayer

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// AgglayerClientMock is an autogenerated mock type for the AgglayerClientInterface type
type AgglayerClientMock struct {
	mock.Mock
}

// GetCertificateHeader provides a mock function with given fields: certificateHash
func (_m *AgglayerClientMock) GetCertificateHeader(certificateHash common.Hash) (*CertificateHeader, error) {
	ret := _m.Called(certificateHash)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateHeader")
	}

	var r0 *CertificateHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) (*CertificateHeader, error)); ok {
		return rf(certificateHash)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) *CertificateHeader); ok {
		r0 = rf(certificateHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CertificateHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(certificateHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCertificate provides a mock function with given fields: certificate
func (_m *AgglayerClientMock) SendCertificate(certificate *SignedCertificate) (common.Hash, error) {
	ret := _m.Called(certificate)

	if len(ret) == 0 {
		panic("no return value specified for SendCertificate")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(*SignedCertificate) (common.Hash, error)); ok {
		return rf(certificate)
	}
	if rf, ok := ret.Get(0).(func(*SignedCertificate) common.Hash); ok {
		r0 = rf(certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(*SignedCertificate) error); ok {
		r1 = rf(certificate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTx provides a mock function with given fields: signedTx
func (_m *AgglayerClientMock) SendTx(signedTx SignedTx) (common.Hash, error) {
	ret := _m.Called(signedTx)

	if len(ret) == 0 {
		panic("no return value specified for SendTx")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(SignedTx) (common.Hash, error)); ok {
		return rf(signedTx)
	}
	if rf, ok := ret.Get(0).(func(SignedTx) common.Hash); ok {
		r0 = rf(signedTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(SignedTx) error); ok {
		r1 = rf(signedTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitTxToBeMined provides a mock function with given fields: hash, ctx
func (_m *AgglayerClientMock) WaitTxToBeMined(hash common.Hash, ctx context.Context) error {
	ret := _m.Called(hash, ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitTxToBeMined")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Hash, context.Context) error); ok {
		r0 = rf(hash, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAgglayerClientMock creates a new instance of AgglayerClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgglayerClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgglayerClientMock {
	mock := &AgglayerClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
