// Code generated by mockery v2.45.0. DO NOT EDIT.

package aggsender

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	l1infotreesync "github.com/0xPolygon/cdk/l1infotreesync"

	mock "github.com/stretchr/testify/mock"

	types "github.com/0xPolygon/cdk/tree/types"
)

// L1InfoTreeSyncerMock is an autogenerated mock type for the L1InfoTreeSyncer type
type L1InfoTreeSyncerMock struct {
	mock.Mock
}

// GetInfoByGlobalExitRoot provides a mock function with given fields: globalExitRoot
func (_m *L1InfoTreeSyncerMock) GetInfoByGlobalExitRoot(globalExitRoot common.Hash) (*l1infotreesync.L1InfoTreeLeaf, error) {
	ret := _m.Called(globalExitRoot)

	if len(ret) == 0 {
		panic("no return value specified for GetInfoByGlobalExitRoot")
	}

	var r0 *l1infotreesync.L1InfoTreeLeaf
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) (*l1infotreesync.L1InfoTreeLeaf, error)); ok {
		return rf(globalExitRoot)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) *l1infotreesync.L1InfoTreeLeaf); ok {
		r0 = rf(globalExitRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*l1infotreesync.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(globalExitRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetL1InfoTreeMerkleProofFromIndexToRoot provides a mock function with given fields: ctx, index, root
func (_m *L1InfoTreeSyncerMock) GetL1InfoTreeMerkleProofFromIndexToRoot(ctx context.Context, index uint32, root common.Hash) (types.Proof, error) {
	ret := _m.Called(ctx, index, root)

	if len(ret) == 0 {
		panic("no return value specified for GetL1InfoTreeMerkleProofFromIndexToRoot")
	}

	var r0 types.Proof
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Hash) (types.Proof, error)); ok {
		return rf(ctx, index, root)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Hash) types.Proof); ok {
		r0 = rf(ctx, index, root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Proof)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, common.Hash) error); ok {
		r1 = rf(ctx, index, root)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewL1InfoTreeSyncerMock creates a new instance of L1InfoTreeSyncerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewL1InfoTreeSyncerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *L1InfoTreeSyncerMock {
	mock := &L1InfoTreeSyncerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
