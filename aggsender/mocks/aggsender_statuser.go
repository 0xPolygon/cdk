// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/0xPolygon/cdk/aggsender/types"
	mock "github.com/stretchr/testify/mock"
)

// AggsenderStatuser is an autogenerated mock type for the aggsenderStatuser type
type AggsenderStatuser struct {
	mock.Mock
}

type AggsenderStatuser_Expecter struct {
	mock *mock.Mock
}

func (_m *AggsenderStatuser) EXPECT() *AggsenderStatuser_Expecter {
	return &AggsenderStatuser_Expecter{mock: &_m.Mock}
}

// Status provides a mock function with given fields:
func (_m *AggsenderStatuser) Status() types.AggsenderStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 types.AggsenderStatus
	if rf, ok := ret.Get(0).(func() types.AggsenderStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.AggsenderStatus)
	}

	return r0
}

// AggsenderStatuser_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type AggsenderStatuser_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *AggsenderStatuser_Expecter) Status() *AggsenderStatuser_Status_Call {
	return &AggsenderStatuser_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *AggsenderStatuser_Status_Call) Run(run func()) *AggsenderStatuser_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AggsenderStatuser_Status_Call) Return(_a0 types.AggsenderStatus) *AggsenderStatuser_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AggsenderStatuser_Status_Call) RunAndReturn(run func() types.AggsenderStatus) *AggsenderStatuser_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewAggsenderStatuser creates a new instance of AggsenderStatuser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggsenderStatuser(t interface {
	mock.TestingT
	Cleanup(func())
}) *AggsenderStatuser {
	mock := &AggsenderStatuser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
