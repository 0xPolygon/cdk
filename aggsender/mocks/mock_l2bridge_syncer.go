// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	bridgesync "github.com/0xPolygon/cdk/bridgesync"
	common "github.com/ethereum/go-ethereum/common"

	context "context"

	etherman "github.com/0xPolygon/cdk/etherman"

	mock "github.com/stretchr/testify/mock"

	types "github.com/0xPolygon/cdk/tree/types"
)

// L2BridgeSyncerMock is an autogenerated mock type for the L2BridgeSyncer type
type L2BridgeSyncerMock struct {
	mock.Mock
}

// BlockFinality provides a mock function with given fields:
func (_m *L2BridgeSyncerMock) BlockFinality() etherman.BlockNumberFinality {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockFinality")
	}

	var r0 etherman.BlockNumberFinality
	if rf, ok := ret.Get(0).(func() etherman.BlockNumberFinality); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(etherman.BlockNumberFinality)
	}

	return r0
}

// GetBlockByLER provides a mock function with given fields: ctx, ler
func (_m *L2BridgeSyncerMock) GetBlockByLER(ctx context.Context, ler common.Hash) (uint64, error) {
	ret := _m.Called(ctx, ler)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByLER")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (uint64, error)); ok {
		return rf(ctx, ler)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) uint64); ok {
		r0 = rf(ctx, ler)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, ler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBridges provides a mock function with given fields: ctx, fromBlock, toBlock
func (_m *L2BridgeSyncerMock) GetBridges(ctx context.Context, fromBlock uint64, toBlock uint64) ([]bridgesync.Bridge, error) {
	ret := _m.Called(ctx, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetBridges")
	}

	var r0 []bridgesync.Bridge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]bridgesync.Bridge, error)); ok {
		return rf(ctx, fromBlock, toBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []bridgesync.Bridge); ok {
		r0 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bridgesync.Bridge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, fromBlock, toBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClaims provides a mock function with given fields: ctx, fromBlock, toBlock
func (_m *L2BridgeSyncerMock) GetClaims(ctx context.Context, fromBlock uint64, toBlock uint64) ([]bridgesync.Claim, error) {
	ret := _m.Called(ctx, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetClaims")
	}

	var r0 []bridgesync.Claim
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]bridgesync.Claim, error)); ok {
		return rf(ctx, fromBlock, toBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []bridgesync.Claim); ok {
		r0 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bridgesync.Claim)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, fromBlock, toBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExitRootByIndex provides a mock function with given fields: ctx, index
func (_m *L2BridgeSyncerMock) GetExitRootByIndex(ctx context.Context, index uint32) (types.Root, error) {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for GetExitRootByIndex")
	}

	var r0 types.Root
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (types.Root, error)); ok {
		return rf(ctx, index)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) types.Root); ok {
		r0 = rf(ctx, index)
	} else {
		r0 = ret.Get(0).(types.Root)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OriginNetwork provides a mock function with given fields:
func (_m *L2BridgeSyncerMock) OriginNetwork() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OriginNetwork")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// NewL2BridgeSyncerMock creates a new instance of L2BridgeSyncerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewL2BridgeSyncerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *L2BridgeSyncerMock {
	mock := &L2BridgeSyncerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
