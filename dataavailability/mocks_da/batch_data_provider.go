// Code generated by mockery. DO NOT EDIT.

package mocks_da

import (
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// BatchDataProvider is an autogenerated mock type for the BatchDataProvider type
type BatchDataProvider struct {
	mock.Mock
}

type BatchDataProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *BatchDataProvider) EXPECT() *BatchDataProvider_Expecter {
	return &BatchDataProvider_Expecter{mock: &_m.Mock}
}

// GetBatchL2Data provides a mock function with given fields: batchNum, batchHashes, dataAvailabilityMessage
func (_m *BatchDataProvider) GetBatchL2Data(batchNum []uint64, batchHashes []common.Hash, dataAvailabilityMessage []byte) ([][]byte, error) {
	ret := _m.Called(batchNum, batchHashes, dataAvailabilityMessage)

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]uint64, []common.Hash, []byte) ([][]byte, error)); ok {
		return rf(batchNum, batchHashes, dataAvailabilityMessage)
	}
	if rf, ok := ret.Get(0).(func([]uint64, []common.Hash, []byte) [][]byte); ok {
		r0 = rf(batchNum, batchHashes, dataAvailabilityMessage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]uint64, []common.Hash, []byte) error); ok {
		r1 = rf(batchNum, batchHashes, dataAvailabilityMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDataProvider_GetBatchL2Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBatchL2Data'
type BatchDataProvider_GetBatchL2Data_Call struct {
	*mock.Call
}

// GetBatchL2Data is a helper method to define mock.On call
//   - batchNum []uint64
//   - batchHashes []common.Hash
//   - dataAvailabilityMessage []byte
func (_e *BatchDataProvider_Expecter) GetBatchL2Data(batchNum interface{}, batchHashes interface{}, dataAvailabilityMessage interface{}) *BatchDataProvider_GetBatchL2Data_Call {
	return &BatchDataProvider_GetBatchL2Data_Call{Call: _e.mock.On("GetBatchL2Data", batchNum, batchHashes, dataAvailabilityMessage)}
}

func (_c *BatchDataProvider_GetBatchL2Data_Call) Run(run func(batchNum []uint64, batchHashes []common.Hash, dataAvailabilityMessage []byte)) *BatchDataProvider_GetBatchL2Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uint64), args[1].([]common.Hash), args[2].([]byte))
	})
	return _c
}

func (_c *BatchDataProvider_GetBatchL2Data_Call) Return(_a0 [][]byte, _a1 error) *BatchDataProvider_GetBatchL2Data_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BatchDataProvider_GetBatchL2Data_Call) RunAndReturn(run func([]uint64, []common.Hash, []byte) ([][]byte, error)) *BatchDataProvider_GetBatchL2Data_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewBatchDataProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewBatchDataProvider creates a new instance of BatchDataProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBatchDataProvider(t mockConstructorTestingTNewBatchDataProvider) *BatchDataProvider {
	mock := &BatchDataProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
