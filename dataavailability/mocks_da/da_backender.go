// Code generated by mockery. DO NOT EDIT.

package mocks_da

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	etherman "github.com/0xPolygon/cdk/etherman"

	mock "github.com/stretchr/testify/mock"
)

// DABackender is an autogenerated mock type for the DABackender type
type DABackender struct {
	mock.Mock
}

type DABackender_Expecter struct {
	mock *mock.Mock
}

func (_m *DABackender) EXPECT() *DABackender_Expecter {
	return &DABackender_Expecter{mock: &_m.Mock}
}

// GetSequence provides a mock function with given fields: ctx, batchHashes, dataAvailabilityMessage
func (_m *DABackender) GetSequence(ctx context.Context, batchHashes []common.Hash, dataAvailabilityMessage []byte) ([][]byte, error) {
	ret := _m.Called(ctx, batchHashes, dataAvailabilityMessage)

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []common.Hash, []byte) ([][]byte, error)); ok {
		return rf(ctx, batchHashes, dataAvailabilityMessage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []common.Hash, []byte) [][]byte); ok {
		r0 = rf(ctx, batchHashes, dataAvailabilityMessage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []common.Hash, []byte) error); ok {
		r1 = rf(ctx, batchHashes, dataAvailabilityMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DABackender_GetSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSequence'
type DABackender_GetSequence_Call struct {
	*mock.Call
}

// GetSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - batchHashes []common.Hash
//   - dataAvailabilityMessage []byte
func (_e *DABackender_Expecter) GetSequence(ctx interface{}, batchHashes interface{}, dataAvailabilityMessage interface{}) *DABackender_GetSequence_Call {
	return &DABackender_GetSequence_Call{Call: _e.mock.On("GetSequence", ctx, batchHashes, dataAvailabilityMessage)}
}

func (_c *DABackender_GetSequence_Call) Run(run func(ctx context.Context, batchHashes []common.Hash, dataAvailabilityMessage []byte)) *DABackender_GetSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]common.Hash), args[2].([]byte))
	})
	return _c
}

func (_c *DABackender_GetSequence_Call) Return(_a0 [][]byte, _a1 error) *DABackender_GetSequence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DABackender_GetSequence_Call) RunAndReturn(run func(context.Context, []common.Hash, []byte) ([][]byte, error)) *DABackender_GetSequence_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields:
func (_m *DABackender) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DABackender_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type DABackender_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *DABackender_Expecter) Init() *DABackender_Init_Call {
	return &DABackender_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *DABackender_Init_Call) Run(run func()) *DABackender_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DABackender_Init_Call) Return(_a0 error) *DABackender_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DABackender_Init_Call) RunAndReturn(run func() error) *DABackender_Init_Call {
	_c.Call.Return(run)
	return _c
}

// PostSequenceBanana provides a mock function with given fields: ctx, sequence
func (_m *DABackender) PostSequenceBanana(ctx context.Context, sequence etherman.SequenceBanana) ([]byte, error) {
	ret := _m.Called(ctx, sequence)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, etherman.SequenceBanana) ([]byte, error)); ok {
		return rf(ctx, sequence)
	}
	if rf, ok := ret.Get(0).(func(context.Context, etherman.SequenceBanana) []byte); ok {
		r0 = rf(ctx, sequence)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, etherman.SequenceBanana) error); ok {
		r1 = rf(ctx, sequence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DABackender_PostSequenceBanana_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSequenceBanana'
type DABackender_PostSequenceBanana_Call struct {
	*mock.Call
}

// PostSequenceBanana is a helper method to define mock.On call
//   - ctx context.Context
//   - sequence etherman.SequenceBanana
func (_e *DABackender_Expecter) PostSequenceBanana(ctx interface{}, sequence interface{}) *DABackender_PostSequenceBanana_Call {
	return &DABackender_PostSequenceBanana_Call{Call: _e.mock.On("PostSequenceBanana", ctx, sequence)}
}

func (_c *DABackender_PostSequenceBanana_Call) Run(run func(ctx context.Context, sequence etherman.SequenceBanana)) *DABackender_PostSequenceBanana_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(etherman.SequenceBanana))
	})
	return _c
}

func (_c *DABackender_PostSequenceBanana_Call) Return(_a0 []byte, _a1 error) *DABackender_PostSequenceBanana_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DABackender_PostSequenceBanana_Call) RunAndReturn(run func(context.Context, etherman.SequenceBanana) ([]byte, error)) *DABackender_PostSequenceBanana_Call {
	_c.Call.Return(run)
	return _c
}

// PostSequenceElderberry provides a mock function with given fields: ctx, batchesData
func (_m *DABackender) PostSequenceElderberry(ctx context.Context, batchesData [][]byte) ([]byte, error) {
	ret := _m.Called(ctx, batchesData)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) ([]byte, error)); ok {
		return rf(ctx, batchesData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) []byte); ok {
		r0 = rf(ctx, batchesData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte) error); ok {
		r1 = rf(ctx, batchesData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DABackender_PostSequenceElderberry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSequenceElderberry'
type DABackender_PostSequenceElderberry_Call struct {
	*mock.Call
}

// PostSequenceElderberry is a helper method to define mock.On call
//   - ctx context.Context
//   - batchesData [][]byte
func (_e *DABackender_Expecter) PostSequenceElderberry(ctx interface{}, batchesData interface{}) *DABackender_PostSequenceElderberry_Call {
	return &DABackender_PostSequenceElderberry_Call{Call: _e.mock.On("PostSequenceElderberry", ctx, batchesData)}
}

func (_c *DABackender_PostSequenceElderberry_Call) Run(run func(ctx context.Context, batchesData [][]byte)) *DABackender_PostSequenceElderberry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]byte))
	})
	return _c
}

func (_c *DABackender_PostSequenceElderberry_Call) Return(_a0 []byte, _a1 error) *DABackender_PostSequenceElderberry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DABackender_PostSequenceElderberry_Call) RunAndReturn(run func(context.Context, [][]byte) ([]byte, error)) *DABackender_PostSequenceElderberry_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewDABackender interface {
	mock.TestingT
	Cleanup(func())
}

// NewDABackender creates a new instance of DABackender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDABackender(t mockConstructorTestingTNewDABackender) *DABackender {
	mock := &DABackender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
