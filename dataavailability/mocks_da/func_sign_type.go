// Code generated by mockery. DO NOT EDIT.

package mocks_da

import (
	client "github.com/0xPolygon/cdk-data-availability/client"

	mock "github.com/stretchr/testify/mock"
)

// FuncSignType is an autogenerated mock type for the funcSignType type
type FuncSignType struct {
	mock.Mock
}

type FuncSignType_Expecter struct {
	mock *mock.Mock
}

func (_m *FuncSignType) EXPECT() *FuncSignType_Expecter {
	return &FuncSignType_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: c
func (_m *FuncSignType) Execute(c client.Client) ([]byte, error) {
	ret := _m.Called(c)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(client.Client) ([]byte, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(client.Client) []byte); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(client.Client) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FuncSignType_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type FuncSignType_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - c client.Client
func (_e *FuncSignType_Expecter) Execute(c interface{}) *FuncSignType_Execute_Call {
	return &FuncSignType_Execute_Call{Call: _e.mock.On("Execute", c)}
}

func (_c *FuncSignType_Execute_Call) Run(run func(c client.Client)) *FuncSignType_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.Client))
	})
	return _c
}

func (_c *FuncSignType_Execute_Call) Return(_a0 []byte, _a1 error) *FuncSignType_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FuncSignType_Execute_Call) RunAndReturn(run func(client.Client) ([]byte, error)) *FuncSignType_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewFuncSignType interface {
	mock.TestingT
	Cleanup(func())
}

// NewFuncSignType creates a new instance of FuncSignType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFuncSignType(t mockConstructorTestingTNewFuncSignType) *FuncSignType {
	mock := &FuncSignType{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
