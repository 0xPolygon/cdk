#!/bin/bash
#Include common varaibles
source $(dirname $0)/../test/scripts/env.sh
###############################################################################
function log_debug() {
    echo -e "\033[0;30mDebug: $*" "\033[0m"
}
###############################################################################
function log_error() {
    echo -e "\033[0;31mError: $*" "\033[0m"
}
###############################################################################
function log_fatal() {
    log_error $*
    exit 1
}
###############################################################################
function ok_or_fatal(){
    if [ $? -ne 0 ]; then
        log_fatal $*
    fi
}

###############################################################################
function get_value_from_toml_file(){
    local _FILE="$1"
    # KEY  = <section1>.<section2>
    local _SECTION="$2"
    local _KEY="$3"
    local _LINE
    local _inside_section=0
    local _return_next_line=0
    local _TMP_FILE=$(mktemp)
    cat $_FILE > $_TMP_FILE
    # Maybe the file doesnt end with a new line so we added just in case
    echo " " >> $_TMP_FILE
    while read -r _LINE; do
        # Clean up line from spaces and tabs
        _LINE=$(echo $_LINE | tr -d '[:space:]')
        if [ $_inside_section -eq 1 ]; then
            if [[ "$_LINE" == [* ]]; then
                return 1
            fi
            if [ $_return_next_line -eq 1 ]; then
               # sed sentence remove quotes
               echo $_LINE | sed 's/^[[:space:]]*"//;s/"$//'
                
                return 0
            fi
            #local _key_splitted=(${_LINE//=/ })    
            local _key_name=$(echo $_LINE | cut -f 1 -d "=")
            local _key_value=$(echo $_LINE | cut -f 2- -d "=")
            if [ "$_key_name" == "$_KEY" ]; then
                if [ $_key_value == "[" ]; then
                    _return_next_line=1
                else
                rm $_TMP_FILE
                # sed sentence remove quotes
                echo $_key_value |  sed 's/^[[:space:]]*"//;s/"$//'
                return 0
                fi
            fi
        elif [ "$_LINE" == "[${_SECTION}]" ]; then
            _inside_section=1
        fi
        
    
    done < "$_TMP_FILE"
    rm $_TMP_FILE
    return 2

}
###############################################################################
function export_key_from_toml_file_or_fatal(){
    local _EXPORTED_VAR_NAME="$1"
    local _FILE="$2"
    local _SECTION="$3"
    local _KEY="$4"
    local _VALUE=$(get_value_from_toml_file $_FILE $_SECTION $_KEY)
    if [ -z "$_VALUE" ]; then
       log_fatal  "$FUNCNAME: key $_KEY not found in section $_SECTION"
    fi
    export $_EXPORTED_VAR_NAME="$_VALUE"
    log_debug "$_EXPORTED_VAR_NAME=${!_EXPORTED_VAR_NAME}  \t\t\t# file:$_FILE section:$_SECTION key:$_KEY"
}

###############################################################################
function export_obj_key_from_toml_file_or_fatal(){
    local _EXPORTED_VAR_NAME="$1"
    local _FILE="$2"
    local _SECTION="$3"
    local _KEY="$4"
    local _OBJ_KEY="$5"
    log_debug "export_obj_key_from_toml_file_or_fatal: $_EXPORTED_VAR_NAME $_FILE $_SECTION $_KEY $_OBJ_KEY"
   local _VALUE=$(get_value_from_toml_file $_FILE $_SECTION $_KEY)
    if [ -z "$_VALUE" ]; then
       log_fatal  "export_obj_key_from_toml_file_or_fatal: obj_key $_KEY not found in section [$_SECTION]"
    fi
    local _CLEAN_VALUE=$(echo $_VALUE | tr -d '{' | tr -d '}' | tr  ',' '\n')
    while read -r _LINE; do
        local _key_splitted=(${_LINE//=/ })    
       
        if [ "${_key_splitted[0]}" == "$_OBJ_KEY" ]; then
            local _KEY_VALUE=${_key_splitted[1]}
             if [ "$_KEY_VALUE" == "[" ]; then
                read -r _LINE
                _KEY_VALUE=$LINE 
                echo "zzz $_KEY_VALUE"
            fi
            local _RES=$(echo $_KEY_VALUE |  sed 's/^[[:space:]]*"//;s/"$//')
            export $_EXPORTED_VAR_NAME="${_RES}"
            log_debug "$_EXPORTED_VAR_NAME=${!_EXPORTED_VAR_NAME}  \t\t\t# file:$_FILE section:$_SECTION key:$_KEY obj_key:$_OBJ_KEY"
            return 0
        fi
    done <<< "$_CLEAN_VALUE"
    log_fatal  "export_obj_key_from_toml_file_or_fatal: obj_key $_OBJ_KEY not found in section $_SECTION/ $_KEY = $_VALUE"
}

###############################################################################
function export_values_of_genesis(){
    local _GENESIS_FILE=$1
    if [ ! -f $_GENESIS_FILE ]; then
        log_fatal "Error: genesis file not found: $_GENESIS_FILE"
    fi
    export l1_chain_id=$(jq -r '.L1Config.chainId' $_GENESIS_FILE  | tr -d '"')
    export pol_token_address=$(jq -r '.L1Config.polTokenAddress' $_GENESIS_FILE)
    export zkevm_rollup_address=$(jq -r '.L1Config.polygonZkEVMAddress' $_GENESIS_FILE)
    export zkevm_rollup_manager_address=$(jq -r '.L1Config.polygonRollupManagerAddress' $_GENESIS_FILE)
    export zkevm_global_exit_root_address=$(jq -r '.L1Config.polygonZkEVMGlobalExitRootAddress' $_GENESIS_FILE)
    export zkevm_rollup_manager_block_number=$(jq -r '.rollupManagerCreationBlockNumber' $_GENESIS_FILE)
}

###############################################################################
function export_values_of_cdk_node_config(){
    local _CDK_CONFIG_FILE=$1
    export_key_from_toml_file_or_fatal      zkevm_l2_sequencer_address              $_CDK_CONFIG_FILE SequenceSender L2Coinbase
    export_obj_key_from_toml_file_or_fatal  zkevm_l2_sequencer_keystore_password              $_CDK_CONFIG_FILE SequenceSender PrivateKey Password
    export_key_from_toml_file_or_fatal      l1_chain_id                             $_CDK_CONFIG_FILE SequenceSender.EthTxManager.Etherman L1ChainID
    export_key_from_toml_file_or_fatal      zkevm_is_validium                       $_CDK_CONFIG_FILE Common IsValidiumMode
    export_key_from_toml_file_or_fatal      zkevm_contract_versions                 $_CDK_CONFIG_FILE Common ContractVersions
    export_key_from_toml_file_or_fatal      l2_chain_id                             $_CDK_CONFIG_FILE Aggregator ChainID
    export_key_from_toml_file_or_fatal      zkevm_aggregator_port                   $_CDK_CONFIG_FILE Aggregator Port
    export_key_from_toml_file_or_fatal      zkevm_l2_agglayer_address               $_CDK_CONFIG_FILE Aggregator SenderAddress
    export_key_from_toml_file_or_fatal      aggregator_db_name                      $_CDK_CONFIG_FILE Aggregator.DB Name
    export_key_from_toml_file_or_fatal      aggregator_db_user                      $_CDK_CONFIG_FILE Aggregator.DB User
    export_key_from_toml_file_or_fatal      aggregator_db_password                  $_CDK_CONFIG_FILE Aggregator.DB           Password
    export_obj_key_from_toml_file_or_fatal  zkevm_l2_aggregator_keystore_password   $_CDK_CONFIG_FILE Aggregator.EthTxManager PrivateKeys Password
    
    export_key_from_toml_file_or_fatal      zkevm_rollup_fork_id        $_CDK_CONFIG_FILE Aggregator ForkId
    export_key_from_toml_file_or_fatal  zkevm_l2_agglayer_keystore_password              $_CDK_CONFIG_FILE  AggSender.SequencerPrivateKey Password
    
    
    export is_cdk_validium=$zkevm_is_validium
    export zkevm_rollup_chain_id=$l2_chain_id

    if [ "$zkevm_is_validium" == "true" ]; then
        log_debug "Validium mode detected... Retrieving the dac_port"
        export_value_from_kurtosis_or_fail dac_port zkevm-dac-001 dac
    fi
    export zkevm_l2_keystore_password=$zkevm_l2_sequencer_keystore_password
}
###############################################################################
# params: 
# $1 -> exported variable name
# $2 -> service name
# $3...$n -> endpoint names (will try all of them until one is found)
###############################################################################
function export_value_from_kurtosis_or_fail(){
    local _EXPORTED_VAR_NAME="$1"
    shift
    local _SERVICE="$1"
    shift
    local _END_POINT
    local _RESULT
    log_debug "Trying to get kurtosis value:$_EXPORTED_VAR_NAME =   $KURTOSIS_ENCLAVE $_SERVICE $*"
    while [ ! -z $1 ]; do
        _END_POINT=$1
        shift
        log_debug "---  kurtosis value:  $KURTOSIS_ENCLAVE $_SERVICE $_END_POINT"
        _RESULT=$(kurtosis port print $KURTOSIS_ENCLAVE $_SERVICE $_END_POINT 2>/dev/null)
        if [ ! -z $_RESULT ]; then
            break
        fi
    done
    export $_EXPORTED_VAR_NAME=$_RESULT
    if [ -z $_EXPORTED_VAR_NAME ]; then
        log_fatal "Error getting kurtosis port:  $KURTOSIS_ENCLAVE $_SERVICE $_END_POINT"
    fi
    log_debug "$_EXPORTED_VAR_NAME=${!_EXPORTED_VAR_NAME}  \t\t\t# Kurtosis $KURTOSIS_ENCLAVE $_SERVICE $_END_POINT"
}
###############################################################################
function export_portnum_from_kurtosis_or_fail(){
    local _EXPORTED_VAR_NAME="$1"
    export_value_from_kurtosis_or_fail $* > /dev/null
    local _VALUE
    eval "_VALUE=\$$1"
    # sed sentece eliminate protocol (xyz://) is have it
    # kurtosis sometimes include protocol but not always  
    local _PORT=$(echo "$_VALUE" |  sed -E 's|^[a-zA-Z]+://||' | cut -f 2 -d ":")
    if [ -z $_PORT ]; then
        log_fatal "Error getting port number from kurtosis:  $2 $3 -> $_VALUE"
    fi
    export $_EXPORTED_VAR_NAME=$_PORT
    log_debug "$_EXPORTED_VAR_NAME=${!_EXPORTED_VAR_NAME} \t\t\t# Kurtosis $KURTOSIS_ENCLAVE $2 $3"
}
###############################################################################
function export_ports_from_kurtosis(){
    export_portnum_from_kurtosis_or_fail    l1_rpc_port              el-1-geth-lighthouse rpc
    export_portnum_from_kurtosis_or_fail    zkevm_rpc_http_port      cdk-erigon-node-001 rpc rpc
    export_portnum_from_kurtosis_or_fail    zkevm_data_streamer_port cdk-erigon-sequencer-001 data-streamer
    export_portnum_from_kurtosis_or_fail    aggregator_db_port       postgres-001 postgres
    export_portnum_from_kurtosis_or_fail    agglayer_port            agglayer agglayer
    export aggregator_db_hostname="127.0.0.1"
    export l1_rpc_url="http://localhost:${l1_rpc_port}"
    export l2_rpc_url="http://localhost:${zkevm_rpc_http_port}"
    export agglayer_url="http://localhost:${agglayer_port}"
}

###############################################################################
function  export_forced_values(){
    export global_log_level="debug"
    export l2_rpc_name="localhost"
    export sequencer_name="localhost"
    export deployment_suffix=""
}
###############################################################################
function check_requirements(){
    which kurtosis > /dev/null
    if [ $? -ne 0 ]; then
    log_error "kurtosis is not installed. Please install it:"
    cat << EOF
            echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
        echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
        sudo apt install kurtosis-cli
        kurtosis version
EOF
        exit 1
    
    fi
    if [ -z $TMP_CDK_FOLDER -o -z $KURTOSIS_ENCLAVE ]; then
        log_fatal "TMP_CDK_FOLDER or KURTOSIS_ENCLAVE is not set. Must be set on file env.sh"
    fi
    kurtosis enclave inspect $KURTOSIS_ENCLAVE > /dev/null
    if [ $? -ne 0 ]; then
        log_error  "Error inspecting enclave $KURTOSIS_ENCLAVE"
        echo "You must start kurtosis environment before running this script"
        echo "- start kurtosis:"
        echo "    kurtosis clean --all; kurtosis run --enclave $KURTOSIS_ENCLAVE --args-file params.yml --image-download always ."

        exit 1
    fi
}
###############################################################################
function create_dest_folder(){
    export DEST=${TMP_CDK_FOLDER}/local_config
    [ ! -d ${DEST} ] && mkdir -p ${DEST}
    rm $DEST/*
}
###############################################################################
function download_kurtosis_artifacts(){
    kurtosis files download $KURTOSIS_ENCLAVE genesis $DEST
    ok_or_fatal "Error downloading kurtosis artifact genesis  to $DEST"
    export genesis_file=$DEST/genesis.json
    
    kurtosis files download $KURTOSIS_ENCLAVE sequencer-keystore $DEST
    ok_or_fatal "Error downloading kurtosis artifact sequencer-keystore  to $DEST"
    export zkevm_l2_sequencer_keystore_file=$DEST/sequencer.keystore
    
    kurtosis files download $KURTOSIS_ENCLAVE cdk-node-config-artifact $DEST
    ok_or_fatal "Error downloading kurtosis artifact cdk-node-config-artifact  to $DEST"

    kurtosis files download $KURTOSIS_ENCLAVE aggregator-keystore $DEST
    ok_or_fatal "Error downloading kurtosis artifact cdk-node-config-artifact  to $DEST"
    export zkevm_l2_aggregator_keystore_file=$DEST/aggregator.keystore

    kurtosis files download $KURTOSIS_ENCLAVE agglayer-keystore $DEST
    ok_or_fatal "Error downloading kurtosis artifact agglayer  to $DEST"
    export zkevm_l2_agglayer_keystore_file=$DEST/agglayer.keystore
    
}
###############################################################################
function check_generated_config_file(){
    grep "<no value>" $DEST_TEMPLATE_FILE > /dev/null
    if [ $? -ne 1 ]; then
        log_error "some values are not set, check $ORIG_TEMPLATE_FILE"
        echo ""
        echo "missing keys in rendered template: $DEST_TEMPLATE_FILE"
        echo " "
        grep "<no value>" $DEST_TEMPLATE_FILE
        exit 1
    fi
}
###############################################################################
# MAIN
###############################################################################
set -o pipefail # enable strict command pipe error detection

check_requirements
create_dest_folder

download_kurtosis_artifacts

export_values_of_genesis $genesis_file
export_ports_from_kurtosis
export_values_of_cdk_node_config $DEST/cdk-node-config.toml
export_forced_values

ORIG_TEMPLATE_FILE=test/config/kurtosis-cdk-node-config.toml.template
DEST_TEMPLATE_FILE=$DEST/test.kurtosis.toml

# Generate config file
go run scripts/run_template.go $ORIG_TEMPLATE_FILE > $DEST_TEMPLATE_FILE
ok_or_fatal "Error generating template"

check_generated_config_file


echo " "
echo "file generated at:" $DEST/test.kurtosis.toml

echo "- to restart kurtosis:"
echo "    kurtosis clean --all; kurtosis run --enclave cdk-v1 --args-file params.yml --image-download always ."
echo " "
echo "- Stop cdk-node:"
echo "    kurtosis service stop cdk-v1 cdk-node-001"
echo " "
echo "- Add next configuration to vscode launch.json"
cat << EOF
         {
            "name": "Debug cdk",
            "type": "go",
            "request": "launch",
            "mode": "auto",
            "program": "cmd/",
            "cwd": "\${workspaceFolder}",
            "args":[
                "run",
                "-cfg", "$DEST_TEMPLATE_FILE",
                "-components", "sequence-sender,aggregator",
            ]
        },

        To run AggSender change components to:
                "-components", "aggsender",
EOF

