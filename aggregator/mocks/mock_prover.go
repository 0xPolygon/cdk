// Code generated by mockery v2.39.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	prover "github.com/0xPolygon/cdk/aggregator/prover"
)

// ProverInterfaceMock is an autogenerated mock type for the ProverInterface type
type ProverInterfaceMock struct {
	mock.Mock
}

// Addr provides a mock function with given fields:
func (_m *ProverInterfaceMock) Addr() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Addr")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AggregatedProof provides a mock function with given fields: inputProof1, inputProof2
func (_m *ProverInterfaceMock) AggregatedProof(inputProof1 string, inputProof2 string) (*string, error) {
	ret := _m.Called(inputProof1, inputProof2)

	if len(ret) == 0 {
		panic("no return value specified for AggregatedProof")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*string, error)); ok {
		return rf(inputProof1, inputProof2)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(inputProof1, inputProof2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(inputProof1, inputProof2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchProof provides a mock function with given fields: input
func (_m *ProverInterfaceMock) BatchProof(input *prover.StatelessInputProver) (*string, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for BatchProof")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*prover.StatelessInputProver) (*string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*prover.StatelessInputProver) *string); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*prover.StatelessInputProver) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinalProof provides a mock function with given fields: inputProof, aggregatorAddr
func (_m *ProverInterfaceMock) FinalProof(inputProof string, aggregatorAddr string) (*string, error) {
	ret := _m.Called(inputProof, aggregatorAddr)

	if len(ret) == 0 {
		panic("no return value specified for FinalProof")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*string, error)); ok {
		return rf(inputProof, aggregatorAddr)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(inputProof, aggregatorAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(inputProof, aggregatorAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ID provides a mock function with given fields:
func (_m *ProverInterfaceMock) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsIdle provides a mock function with given fields:
func (_m *ProverInterfaceMock) IsIdle() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsIdle")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *ProverInterfaceMock) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// WaitFinalProof provides a mock function with given fields: ctx, proofID
func (_m *ProverInterfaceMock) WaitFinalProof(ctx context.Context, proofID string) (*prover.FinalProof, error) {
	ret := _m.Called(ctx, proofID)

	if len(ret) == 0 {
		panic("no return value specified for WaitFinalProof")
	}

	var r0 *prover.FinalProof
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*prover.FinalProof, error)); ok {
		return rf(ctx, proofID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *prover.FinalProof); ok {
		r0 = rf(ctx, proofID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prover.FinalProof)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, proofID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitRecursiveProof provides a mock function with given fields: ctx, proofID
func (_m *ProverInterfaceMock) WaitRecursiveProof(ctx context.Context, proofID string) (string, common.Hash, common.Hash, error) {
	ret := _m.Called(ctx, proofID)

	if len(ret) == 0 {
		panic("no return value specified for WaitRecursiveProof")
	}

	var r0 string
	var r1 common.Hash
	var r2 common.Hash
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, common.Hash, common.Hash, error)); ok {
		return rf(ctx, proofID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, proofID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) common.Hash); ok {
		r1 = rf(ctx, proofID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.Hash)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) common.Hash); ok {
		r2 = rf(ctx, proofID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(common.Hash)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, string) error); ok {
		r3 = rf(ctx, proofID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewProverInterfaceMock creates a new instance of ProverInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProverInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProverInterfaceMock {
	mock := &ProverInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
