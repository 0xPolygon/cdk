// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	datastreamer "github.com/0xPolygonHermez/zkevm-data-streamer/datastreamer"
	mock "github.com/stretchr/testify/mock"
)

// StreamClientMock is an autogenerated mock type for the StreamClient type
type StreamClientMock struct {
	mock.Mock
}

type StreamClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *StreamClientMock) EXPECT() *StreamClientMock_Expecter {
	return &StreamClientMock_Expecter{mock: &_m.Mock}
}

// ExecCommandGetBookmark provides a mock function with given fields: fromBookmark
func (_m *StreamClientMock) ExecCommandGetBookmark(fromBookmark []byte) (datastreamer.FileEntry, error) {
	ret := _m.Called(fromBookmark)

	if len(ret) == 0 {
		panic("no return value specified for ExecCommandGetBookmark")
	}

	var r0 datastreamer.FileEntry
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (datastreamer.FileEntry, error)); ok {
		return rf(fromBookmark)
	}
	if rf, ok := ret.Get(0).(func([]byte) datastreamer.FileEntry); ok {
		r0 = rf(fromBookmark)
	} else {
		r0 = ret.Get(0).(datastreamer.FileEntry)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(fromBookmark)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamClientMock_ExecCommandGetBookmark_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCommandGetBookmark'
type StreamClientMock_ExecCommandGetBookmark_Call struct {
	*mock.Call
}

// ExecCommandGetBookmark is a helper method to define mock.On call
//   - fromBookmark []byte
func (_e *StreamClientMock_Expecter) ExecCommandGetBookmark(fromBookmark interface{}) *StreamClientMock_ExecCommandGetBookmark_Call {
	return &StreamClientMock_ExecCommandGetBookmark_Call{Call: _e.mock.On("ExecCommandGetBookmark", fromBookmark)}
}

func (_c *StreamClientMock_ExecCommandGetBookmark_Call) Run(run func(fromBookmark []byte)) *StreamClientMock_ExecCommandGetBookmark_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *StreamClientMock_ExecCommandGetBookmark_Call) Return(_a0 datastreamer.FileEntry, _a1 error) *StreamClientMock_ExecCommandGetBookmark_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamClientMock_ExecCommandGetBookmark_Call) RunAndReturn(run func([]byte) (datastreamer.FileEntry, error)) *StreamClientMock_ExecCommandGetBookmark_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCommandGetEntry provides a mock function with given fields: fromEntry
func (_m *StreamClientMock) ExecCommandGetEntry(fromEntry uint64) (datastreamer.FileEntry, error) {
	ret := _m.Called(fromEntry)

	if len(ret) == 0 {
		panic("no return value specified for ExecCommandGetEntry")
	}

	var r0 datastreamer.FileEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (datastreamer.FileEntry, error)); ok {
		return rf(fromEntry)
	}
	if rf, ok := ret.Get(0).(func(uint64) datastreamer.FileEntry); ok {
		r0 = rf(fromEntry)
	} else {
		r0 = ret.Get(0).(datastreamer.FileEntry)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(fromEntry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamClientMock_ExecCommandGetEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCommandGetEntry'
type StreamClientMock_ExecCommandGetEntry_Call struct {
	*mock.Call
}

// ExecCommandGetEntry is a helper method to define mock.On call
//   - fromEntry uint64
func (_e *StreamClientMock_Expecter) ExecCommandGetEntry(fromEntry interface{}) *StreamClientMock_ExecCommandGetEntry_Call {
	return &StreamClientMock_ExecCommandGetEntry_Call{Call: _e.mock.On("ExecCommandGetEntry", fromEntry)}
}

func (_c *StreamClientMock_ExecCommandGetEntry_Call) Run(run func(fromEntry uint64)) *StreamClientMock_ExecCommandGetEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *StreamClientMock_ExecCommandGetEntry_Call) Return(_a0 datastreamer.FileEntry, _a1 error) *StreamClientMock_ExecCommandGetEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamClientMock_ExecCommandGetEntry_Call) RunAndReturn(run func(uint64) (datastreamer.FileEntry, error)) *StreamClientMock_ExecCommandGetEntry_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCommandGetHeader provides a mock function with given fields:
func (_m *StreamClientMock) ExecCommandGetHeader() (datastreamer.HeaderEntry, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExecCommandGetHeader")
	}

	var r0 datastreamer.HeaderEntry
	var r1 error
	if rf, ok := ret.Get(0).(func() (datastreamer.HeaderEntry, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() datastreamer.HeaderEntry); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(datastreamer.HeaderEntry)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamClientMock_ExecCommandGetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCommandGetHeader'
type StreamClientMock_ExecCommandGetHeader_Call struct {
	*mock.Call
}

// ExecCommandGetHeader is a helper method to define mock.On call
func (_e *StreamClientMock_Expecter) ExecCommandGetHeader() *StreamClientMock_ExecCommandGetHeader_Call {
	return &StreamClientMock_ExecCommandGetHeader_Call{Call: _e.mock.On("ExecCommandGetHeader")}
}

func (_c *StreamClientMock_ExecCommandGetHeader_Call) Run(run func()) *StreamClientMock_ExecCommandGetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StreamClientMock_ExecCommandGetHeader_Call) Return(_a0 datastreamer.HeaderEntry, _a1 error) *StreamClientMock_ExecCommandGetHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StreamClientMock_ExecCommandGetHeader_Call) RunAndReturn(run func() (datastreamer.HeaderEntry, error)) *StreamClientMock_ExecCommandGetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCommandStart provides a mock function with given fields: fromEntry
func (_m *StreamClientMock) ExecCommandStart(fromEntry uint64) error {
	ret := _m.Called(fromEntry)

	if len(ret) == 0 {
		panic("no return value specified for ExecCommandStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(fromEntry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StreamClientMock_ExecCommandStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCommandStart'
type StreamClientMock_ExecCommandStart_Call struct {
	*mock.Call
}

// ExecCommandStart is a helper method to define mock.On call
//   - fromEntry uint64
func (_e *StreamClientMock_Expecter) ExecCommandStart(fromEntry interface{}) *StreamClientMock_ExecCommandStart_Call {
	return &StreamClientMock_ExecCommandStart_Call{Call: _e.mock.On("ExecCommandStart", fromEntry)}
}

func (_c *StreamClientMock_ExecCommandStart_Call) Run(run func(fromEntry uint64)) *StreamClientMock_ExecCommandStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *StreamClientMock_ExecCommandStart_Call) Return(_a0 error) *StreamClientMock_ExecCommandStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamClientMock_ExecCommandStart_Call) RunAndReturn(run func(uint64) error) *StreamClientMock_ExecCommandStart_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCommandStartBookmark provides a mock function with given fields: fromBookmark
func (_m *StreamClientMock) ExecCommandStartBookmark(fromBookmark []byte) error {
	ret := _m.Called(fromBookmark)

	if len(ret) == 0 {
		panic("no return value specified for ExecCommandStartBookmark")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(fromBookmark)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StreamClientMock_ExecCommandStartBookmark_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCommandStartBookmark'
type StreamClientMock_ExecCommandStartBookmark_Call struct {
	*mock.Call
}

// ExecCommandStartBookmark is a helper method to define mock.On call
//   - fromBookmark []byte
func (_e *StreamClientMock_Expecter) ExecCommandStartBookmark(fromBookmark interface{}) *StreamClientMock_ExecCommandStartBookmark_Call {
	return &StreamClientMock_ExecCommandStartBookmark_Call{Call: _e.mock.On("ExecCommandStartBookmark", fromBookmark)}
}

func (_c *StreamClientMock_ExecCommandStartBookmark_Call) Run(run func(fromBookmark []byte)) *StreamClientMock_ExecCommandStartBookmark_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *StreamClientMock_ExecCommandStartBookmark_Call) Return(_a0 error) *StreamClientMock_ExecCommandStartBookmark_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamClientMock_ExecCommandStartBookmark_Call) RunAndReturn(run func([]byte) error) *StreamClientMock_ExecCommandStartBookmark_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCommandStop provides a mock function with given fields:
func (_m *StreamClientMock) ExecCommandStop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExecCommandStop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StreamClientMock_ExecCommandStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCommandStop'
type StreamClientMock_ExecCommandStop_Call struct {
	*mock.Call
}

// ExecCommandStop is a helper method to define mock.On call
func (_e *StreamClientMock_Expecter) ExecCommandStop() *StreamClientMock_ExecCommandStop_Call {
	return &StreamClientMock_ExecCommandStop_Call{Call: _e.mock.On("ExecCommandStop")}
}

func (_c *StreamClientMock_ExecCommandStop_Call) Run(run func()) *StreamClientMock_ExecCommandStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StreamClientMock_ExecCommandStop_Call) Return(_a0 error) *StreamClientMock_ExecCommandStop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamClientMock_ExecCommandStop_Call) RunAndReturn(run func() error) *StreamClientMock_ExecCommandStop_Call {
	_c.Call.Return(run)
	return _c
}

// GetFromStream provides a mock function with given fields:
func (_m *StreamClientMock) GetFromStream() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFromStream")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// StreamClientMock_GetFromStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFromStream'
type StreamClientMock_GetFromStream_Call struct {
	*mock.Call
}

// GetFromStream is a helper method to define mock.On call
func (_e *StreamClientMock_Expecter) GetFromStream() *StreamClientMock_GetFromStream_Call {
	return &StreamClientMock_GetFromStream_Call{Call: _e.mock.On("GetFromStream")}
}

func (_c *StreamClientMock_GetFromStream_Call) Run(run func()) *StreamClientMock_GetFromStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StreamClientMock_GetFromStream_Call) Return(_a0 uint64) *StreamClientMock_GetFromStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamClientMock_GetFromStream_Call) RunAndReturn(run func() uint64) *StreamClientMock_GetFromStream_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalEntries provides a mock function with given fields:
func (_m *StreamClientMock) GetTotalEntries() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalEntries")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// StreamClientMock_GetTotalEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalEntries'
type StreamClientMock_GetTotalEntries_Call struct {
	*mock.Call
}

// GetTotalEntries is a helper method to define mock.On call
func (_e *StreamClientMock_Expecter) GetTotalEntries() *StreamClientMock_GetTotalEntries_Call {
	return &StreamClientMock_GetTotalEntries_Call{Call: _e.mock.On("GetTotalEntries")}
}

func (_c *StreamClientMock_GetTotalEntries_Call) Run(run func()) *StreamClientMock_GetTotalEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StreamClientMock_GetTotalEntries_Call) Return(_a0 uint64) *StreamClientMock_GetTotalEntries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamClientMock_GetTotalEntries_Call) RunAndReturn(run func() uint64) *StreamClientMock_GetTotalEntries_Call {
	_c.Call.Return(run)
	return _c
}

// IsStarted provides a mock function with given fields:
func (_m *StreamClientMock) IsStarted() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsStarted")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StreamClientMock_IsStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStarted'
type StreamClientMock_IsStarted_Call struct {
	*mock.Call
}

// IsStarted is a helper method to define mock.On call
func (_e *StreamClientMock_Expecter) IsStarted() *StreamClientMock_IsStarted_Call {
	return &StreamClientMock_IsStarted_Call{Call: _e.mock.On("IsStarted")}
}

func (_c *StreamClientMock_IsStarted_Call) Run(run func()) *StreamClientMock_IsStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StreamClientMock_IsStarted_Call) Return(_a0 bool) *StreamClientMock_IsStarted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamClientMock_IsStarted_Call) RunAndReturn(run func() bool) *StreamClientMock_IsStarted_Call {
	_c.Call.Return(run)
	return _c
}

// ResetProcessEntryFunc provides a mock function with given fields:
func (_m *StreamClientMock) ResetProcessEntryFunc() {
	_m.Called()
}

// StreamClientMock_ResetProcessEntryFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetProcessEntryFunc'
type StreamClientMock_ResetProcessEntryFunc_Call struct {
	*mock.Call
}

// ResetProcessEntryFunc is a helper method to define mock.On call
func (_e *StreamClientMock_Expecter) ResetProcessEntryFunc() *StreamClientMock_ResetProcessEntryFunc_Call {
	return &StreamClientMock_ResetProcessEntryFunc_Call{Call: _e.mock.On("ResetProcessEntryFunc")}
}

func (_c *StreamClientMock_ResetProcessEntryFunc_Call) Run(run func()) *StreamClientMock_ResetProcessEntryFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StreamClientMock_ResetProcessEntryFunc_Call) Return() *StreamClientMock_ResetProcessEntryFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *StreamClientMock_ResetProcessEntryFunc_Call) RunAndReturn(run func()) *StreamClientMock_ResetProcessEntryFunc_Call {
	_c.Call.Return(run)
	return _c
}

// SetProcessEntryFunc provides a mock function with given fields: f
func (_m *StreamClientMock) SetProcessEntryFunc(f datastreamer.ProcessEntryFunc) {
	_m.Called(f)
}

// StreamClientMock_SetProcessEntryFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProcessEntryFunc'
type StreamClientMock_SetProcessEntryFunc_Call struct {
	*mock.Call
}

// SetProcessEntryFunc is a helper method to define mock.On call
//   - f datastreamer.ProcessEntryFunc
func (_e *StreamClientMock_Expecter) SetProcessEntryFunc(f interface{}) *StreamClientMock_SetProcessEntryFunc_Call {
	return &StreamClientMock_SetProcessEntryFunc_Call{Call: _e.mock.On("SetProcessEntryFunc", f)}
}

func (_c *StreamClientMock_SetProcessEntryFunc_Call) Run(run func(f datastreamer.ProcessEntryFunc)) *StreamClientMock_SetProcessEntryFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datastreamer.ProcessEntryFunc))
	})
	return _c
}

func (_c *StreamClientMock_SetProcessEntryFunc_Call) Return() *StreamClientMock_SetProcessEntryFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *StreamClientMock_SetProcessEntryFunc_Call) RunAndReturn(run func(datastreamer.ProcessEntryFunc)) *StreamClientMock_SetProcessEntryFunc_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *StreamClientMock) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StreamClientMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type StreamClientMock_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *StreamClientMock_Expecter) Start() *StreamClientMock_Start_Call {
	return &StreamClientMock_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *StreamClientMock_Start_Call) Run(run func()) *StreamClientMock_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StreamClientMock_Start_Call) Return(_a0 error) *StreamClientMock_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamClientMock_Start_Call) RunAndReturn(run func() error) *StreamClientMock_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewStreamClientMock creates a new instance of StreamClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStreamClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *StreamClientMock {
	mock := &StreamClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
