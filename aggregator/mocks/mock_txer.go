// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// TxerMock is an autogenerated mock type for the Txer type
type TxerMock struct {
	mock.Mock
}

type TxerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TxerMock) EXPECT() *TxerMock_Expecter {
	return &TxerMock_Expecter{mock: &_m.Mock}
}

// AddCommitCallback provides a mock function with given fields: cb
func (_m *TxerMock) AddCommitCallback(cb func()) {
	_m.Called(cb)
}

// TxerMock_AddCommitCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCommitCallback'
type TxerMock_AddCommitCallback_Call struct {
	*mock.Call
}

// AddCommitCallback is a helper method to define mock.On call
//   - cb func()
func (_e *TxerMock_Expecter) AddCommitCallback(cb interface{}) *TxerMock_AddCommitCallback_Call {
	return &TxerMock_AddCommitCallback_Call{Call: _e.mock.On("AddCommitCallback", cb)}
}

func (_c *TxerMock_AddCommitCallback_Call) Run(run func(cb func())) *TxerMock_AddCommitCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *TxerMock_AddCommitCallback_Call) Return() *TxerMock_AddCommitCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *TxerMock_AddCommitCallback_Call) RunAndReturn(run func(func())) *TxerMock_AddCommitCallback_Call {
	_c.Run(run)
	return _c
}

// AddRollbackCallback provides a mock function with given fields: cb
func (_m *TxerMock) AddRollbackCallback(cb func()) {
	_m.Called(cb)
}

// TxerMock_AddRollbackCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRollbackCallback'
type TxerMock_AddRollbackCallback_Call struct {
	*mock.Call
}

// AddRollbackCallback is a helper method to define mock.On call
//   - cb func()
func (_e *TxerMock_Expecter) AddRollbackCallback(cb interface{}) *TxerMock_AddRollbackCallback_Call {
	return &TxerMock_AddRollbackCallback_Call{Call: _e.mock.On("AddRollbackCallback", cb)}
}

func (_c *TxerMock_AddRollbackCallback_Call) Run(run func(cb func())) *TxerMock_AddRollbackCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *TxerMock_AddRollbackCallback_Call) Return() *TxerMock_AddRollbackCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *TxerMock_AddRollbackCallback_Call) RunAndReturn(run func(func())) *TxerMock_AddRollbackCallback_Call {
	_c.Run(run)
	return _c
}

// Commit provides a mock function with no fields
func (_m *TxerMock) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxerMock_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type TxerMock_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *TxerMock_Expecter) Commit() *TxerMock_Commit_Call {
	return &TxerMock_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *TxerMock_Commit_Call) Run(run func()) *TxerMock_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TxerMock_Commit_Call) Return(_a0 error) *TxerMock_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxerMock_Commit_Call) RunAndReturn(run func() error) *TxerMock_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: query, args
func (_m *TxerMock) Exec(query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (sql.Result, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxerMock_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type TxerMock_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *TxerMock_Expecter) Exec(query interface{}, args ...interface{}) *TxerMock_Exec_Call {
	return &TxerMock_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{query}, args...)...)}
}

func (_c *TxerMock_Exec_Call) Run(run func(query string, args ...interface{})) *TxerMock_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *TxerMock_Exec_Call) Return(_a0 sql.Result, _a1 error) *TxerMock_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TxerMock_Exec_Call) RunAndReturn(run func(string, ...interface{}) (sql.Result, error)) *TxerMock_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: query, args
func (_m *TxerMock) Query(query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (*sql.Rows, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Rows); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxerMock_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type TxerMock_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *TxerMock_Expecter) Query(query interface{}, args ...interface{}) *TxerMock_Query_Call {
	return &TxerMock_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{query}, args...)...)}
}

func (_c *TxerMock_Query_Call) Run(run func(query string, args ...interface{})) *TxerMock_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *TxerMock_Query_Call) Return(_a0 *sql.Rows, _a1 error) *TxerMock_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TxerMock_Query_Call) RunAndReturn(run func(string, ...interface{}) (*sql.Rows, error)) *TxerMock_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: query, args
func (_m *TxerMock) QueryRow(query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Row); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// TxerMock_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type TxerMock_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *TxerMock_Expecter) QueryRow(query interface{}, args ...interface{}) *TxerMock_QueryRow_Call {
	return &TxerMock_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{query}, args...)...)}
}

func (_c *TxerMock_QueryRow_Call) Run(run func(query string, args ...interface{})) *TxerMock_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *TxerMock_QueryRow_Call) Return(_a0 *sql.Row) *TxerMock_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxerMock_QueryRow_Call) RunAndReturn(run func(string, ...interface{}) *sql.Row) *TxerMock_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with no fields
func (_m *TxerMock) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxerMock_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type TxerMock_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *TxerMock_Expecter) Rollback() *TxerMock_Rollback_Call {
	return &TxerMock_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *TxerMock_Rollback_Call) Run(run func()) *TxerMock_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TxerMock_Rollback_Call) Return(_a0 error) *TxerMock_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxerMock_Rollback_Call) RunAndReturn(run func() error) *TxerMock_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewTxerMock creates a new instance of TxerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TxerMock {
	mock := &TxerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
