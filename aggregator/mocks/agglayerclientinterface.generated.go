// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	tx "github.com/0xPolygon/agglayer/tx"
)

// AgglayerClientInterfaceMock is an autogenerated mock type for the AgglayerClientInterface type
type AgglayerClientInterfaceMock struct {
	mock.Mock
}

type AgglayerClientInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AgglayerClientInterfaceMock) EXPECT() *AgglayerClientInterfaceMock_Expecter {
	return &AgglayerClientInterfaceMock_Expecter{mock: &_m.Mock}
}

// SendTx provides a mock function with given fields: signedTx
func (_m *AgglayerClientInterfaceMock) SendTx(signedTx tx.SignedTx) (common.Hash, error) {
	ret := _m.Called(signedTx)

	if len(ret) == 0 {
		panic("no return value specified for SendTx")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(tx.SignedTx) (common.Hash, error)); ok {
		return rf(signedTx)
	}
	if rf, ok := ret.Get(0).(func(tx.SignedTx) common.Hash); ok {
		r0 = rf(signedTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(tx.SignedTx) error); ok {
		r1 = rf(signedTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgglayerClientInterfaceMock_SendTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTx'
type AgglayerClientInterfaceMock_SendTx_Call struct {
	*mock.Call
}

// SendTx is a helper method to define mock.On call
//   - signedTx tx.SignedTx
func (_e *AgglayerClientInterfaceMock_Expecter) SendTx(signedTx interface{}) *AgglayerClientInterfaceMock_SendTx_Call {
	return &AgglayerClientInterfaceMock_SendTx_Call{Call: _e.mock.On("SendTx", signedTx)}
}

func (_c *AgglayerClientInterfaceMock_SendTx_Call) Run(run func(signedTx tx.SignedTx)) *AgglayerClientInterfaceMock_SendTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tx.SignedTx))
	})
	return _c
}

func (_c *AgglayerClientInterfaceMock_SendTx_Call) Return(_a0 common.Hash, _a1 error) *AgglayerClientInterfaceMock_SendTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgglayerClientInterfaceMock_SendTx_Call) RunAndReturn(run func(tx.SignedTx) (common.Hash, error)) *AgglayerClientInterfaceMock_SendTx_Call {
	_c.Call.Return(run)
	return _c
}

// WaitTxToBeMined provides a mock function with given fields: hash, ctx
func (_m *AgglayerClientInterfaceMock) WaitTxToBeMined(hash common.Hash, ctx context.Context) error {
	ret := _m.Called(hash, ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitTxToBeMined")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Hash, context.Context) error); ok {
		r0 = rf(hash, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgglayerClientInterfaceMock_WaitTxToBeMined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitTxToBeMined'
type AgglayerClientInterfaceMock_WaitTxToBeMined_Call struct {
	*mock.Call
}

// WaitTxToBeMined is a helper method to define mock.On call
//   - hash common.Hash
//   - ctx context.Context
func (_e *AgglayerClientInterfaceMock_Expecter) WaitTxToBeMined(hash interface{}, ctx interface{}) *AgglayerClientInterfaceMock_WaitTxToBeMined_Call {
	return &AgglayerClientInterfaceMock_WaitTxToBeMined_Call{Call: _e.mock.On("WaitTxToBeMined", hash, ctx)}
}

func (_c *AgglayerClientInterfaceMock_WaitTxToBeMined_Call) Run(run func(hash common.Hash, ctx context.Context)) *AgglayerClientInterfaceMock_WaitTxToBeMined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Hash), args[1].(context.Context))
	})
	return _c
}

func (_c *AgglayerClientInterfaceMock_WaitTxToBeMined_Call) Return(_a0 error) *AgglayerClientInterfaceMock_WaitTxToBeMined_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AgglayerClientInterfaceMock_WaitTxToBeMined_Call) RunAndReturn(run func(common.Hash, context.Context) error) *AgglayerClientInterfaceMock_WaitTxToBeMined_Call {
	_c.Call.Return(run)
	return _c
}

// NewAgglayerClientInterfaceMock creates a new instance of AgglayerClientInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgglayerClientInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgglayerClientInterfaceMock {
	mock := &AgglayerClientInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
