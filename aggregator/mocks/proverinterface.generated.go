// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	prover "github.com/0xPolygon/cdk/aggregator/prover"
)

// ProverInterfaceMock is an autogenerated mock type for the ProverInterface type
type ProverInterfaceMock struct {
	mock.Mock
}

type ProverInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ProverInterfaceMock) EXPECT() *ProverInterfaceMock_Expecter {
	return &ProverInterfaceMock_Expecter{mock: &_m.Mock}
}

// Addr provides a mock function with given fields:
func (_m *ProverInterfaceMock) Addr() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Addr")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ProverInterfaceMock_Addr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Addr'
type ProverInterfaceMock_Addr_Call struct {
	*mock.Call
}

// Addr is a helper method to define mock.On call
func (_e *ProverInterfaceMock_Expecter) Addr() *ProverInterfaceMock_Addr_Call {
	return &ProverInterfaceMock_Addr_Call{Call: _e.mock.On("Addr")}
}

func (_c *ProverInterfaceMock_Addr_Call) Run(run func()) *ProverInterfaceMock_Addr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProverInterfaceMock_Addr_Call) Return(_a0 string) *ProverInterfaceMock_Addr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProverInterfaceMock_Addr_Call) RunAndReturn(run func() string) *ProverInterfaceMock_Addr_Call {
	_c.Call.Return(run)
	return _c
}

// AggregatedProof provides a mock function with given fields: inputProof1, inputProof2
func (_m *ProverInterfaceMock) AggregatedProof(inputProof1 string, inputProof2 string) (*string, error) {
	ret := _m.Called(inputProof1, inputProof2)

	if len(ret) == 0 {
		panic("no return value specified for AggregatedProof")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*string, error)); ok {
		return rf(inputProof1, inputProof2)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(inputProof1, inputProof2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(inputProof1, inputProof2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProverInterfaceMock_AggregatedProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AggregatedProof'
type ProverInterfaceMock_AggregatedProof_Call struct {
	*mock.Call
}

// AggregatedProof is a helper method to define mock.On call
//   - inputProof1 string
//   - inputProof2 string
func (_e *ProverInterfaceMock_Expecter) AggregatedProof(inputProof1 interface{}, inputProof2 interface{}) *ProverInterfaceMock_AggregatedProof_Call {
	return &ProverInterfaceMock_AggregatedProof_Call{Call: _e.mock.On("AggregatedProof", inputProof1, inputProof2)}
}

func (_c *ProverInterfaceMock_AggregatedProof_Call) Run(run func(inputProof1 string, inputProof2 string)) *ProverInterfaceMock_AggregatedProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ProverInterfaceMock_AggregatedProof_Call) Return(_a0 *string, _a1 error) *ProverInterfaceMock_AggregatedProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProverInterfaceMock_AggregatedProof_Call) RunAndReturn(run func(string, string) (*string, error)) *ProverInterfaceMock_AggregatedProof_Call {
	_c.Call.Return(run)
	return _c
}

// BatchProof provides a mock function with given fields: input
func (_m *ProverInterfaceMock) BatchProof(input *prover.StatelessInputProver) (*string, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for BatchProof")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*prover.StatelessInputProver) (*string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*prover.StatelessInputProver) *string); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*prover.StatelessInputProver) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProverInterfaceMock_BatchProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchProof'
type ProverInterfaceMock_BatchProof_Call struct {
	*mock.Call
}

// BatchProof is a helper method to define mock.On call
//   - input *prover.StatelessInputProver
func (_e *ProverInterfaceMock_Expecter) BatchProof(input interface{}) *ProverInterfaceMock_BatchProof_Call {
	return &ProverInterfaceMock_BatchProof_Call{Call: _e.mock.On("BatchProof", input)}
}

func (_c *ProverInterfaceMock_BatchProof_Call) Run(run func(input *prover.StatelessInputProver)) *ProverInterfaceMock_BatchProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*prover.StatelessInputProver))
	})
	return _c
}

func (_c *ProverInterfaceMock_BatchProof_Call) Return(_a0 *string, _a1 error) *ProverInterfaceMock_BatchProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProverInterfaceMock_BatchProof_Call) RunAndReturn(run func(*prover.StatelessInputProver) (*string, error)) *ProverInterfaceMock_BatchProof_Call {
	_c.Call.Return(run)
	return _c
}

// FinalProof provides a mock function with given fields: inputProof, aggregatorAddr
func (_m *ProverInterfaceMock) FinalProof(inputProof string, aggregatorAddr string) (*string, error) {
	ret := _m.Called(inputProof, aggregatorAddr)

	if len(ret) == 0 {
		panic("no return value specified for FinalProof")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*string, error)); ok {
		return rf(inputProof, aggregatorAddr)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(inputProof, aggregatorAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(inputProof, aggregatorAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProverInterfaceMock_FinalProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalProof'
type ProverInterfaceMock_FinalProof_Call struct {
	*mock.Call
}

// FinalProof is a helper method to define mock.On call
//   - inputProof string
//   - aggregatorAddr string
func (_e *ProverInterfaceMock_Expecter) FinalProof(inputProof interface{}, aggregatorAddr interface{}) *ProverInterfaceMock_FinalProof_Call {
	return &ProverInterfaceMock_FinalProof_Call{Call: _e.mock.On("FinalProof", inputProof, aggregatorAddr)}
}

func (_c *ProverInterfaceMock_FinalProof_Call) Run(run func(inputProof string, aggregatorAddr string)) *ProverInterfaceMock_FinalProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ProverInterfaceMock_FinalProof_Call) Return(_a0 *string, _a1 error) *ProverInterfaceMock_FinalProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProverInterfaceMock_FinalProof_Call) RunAndReturn(run func(string, string) (*string, error)) *ProverInterfaceMock_FinalProof_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with given fields:
func (_m *ProverInterfaceMock) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ProverInterfaceMock_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type ProverInterfaceMock_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *ProverInterfaceMock_Expecter) ID() *ProverInterfaceMock_ID_Call {
	return &ProverInterfaceMock_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *ProverInterfaceMock_ID_Call) Run(run func()) *ProverInterfaceMock_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProverInterfaceMock_ID_Call) Return(_a0 string) *ProverInterfaceMock_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProverInterfaceMock_ID_Call) RunAndReturn(run func() string) *ProverInterfaceMock_ID_Call {
	_c.Call.Return(run)
	return _c
}

// IsIdle provides a mock function with given fields:
func (_m *ProverInterfaceMock) IsIdle() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsIdle")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProverInterfaceMock_IsIdle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsIdle'
type ProverInterfaceMock_IsIdle_Call struct {
	*mock.Call
}

// IsIdle is a helper method to define mock.On call
func (_e *ProverInterfaceMock_Expecter) IsIdle() *ProverInterfaceMock_IsIdle_Call {
	return &ProverInterfaceMock_IsIdle_Call{Call: _e.mock.On("IsIdle")}
}

func (_c *ProverInterfaceMock_IsIdle_Call) Run(run func()) *ProverInterfaceMock_IsIdle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProverInterfaceMock_IsIdle_Call) Return(_a0 bool, _a1 error) *ProverInterfaceMock_IsIdle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProverInterfaceMock_IsIdle_Call) RunAndReturn(run func() (bool, error)) *ProverInterfaceMock_IsIdle_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *ProverInterfaceMock) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ProverInterfaceMock_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type ProverInterfaceMock_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *ProverInterfaceMock_Expecter) Name() *ProverInterfaceMock_Name_Call {
	return &ProverInterfaceMock_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *ProverInterfaceMock_Name_Call) Run(run func()) *ProverInterfaceMock_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProverInterfaceMock_Name_Call) Return(_a0 string) *ProverInterfaceMock_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProverInterfaceMock_Name_Call) RunAndReturn(run func() string) *ProverInterfaceMock_Name_Call {
	_c.Call.Return(run)
	return _c
}

// WaitFinalProof provides a mock function with given fields: ctx, proofID
func (_m *ProverInterfaceMock) WaitFinalProof(ctx context.Context, proofID string) (*prover.FinalProof, error) {
	ret := _m.Called(ctx, proofID)

	if len(ret) == 0 {
		panic("no return value specified for WaitFinalProof")
	}

	var r0 *prover.FinalProof
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*prover.FinalProof, error)); ok {
		return rf(ctx, proofID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *prover.FinalProof); ok {
		r0 = rf(ctx, proofID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prover.FinalProof)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, proofID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProverInterfaceMock_WaitFinalProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitFinalProof'
type ProverInterfaceMock_WaitFinalProof_Call struct {
	*mock.Call
}

// WaitFinalProof is a helper method to define mock.On call
//   - ctx context.Context
//   - proofID string
func (_e *ProverInterfaceMock_Expecter) WaitFinalProof(ctx interface{}, proofID interface{}) *ProverInterfaceMock_WaitFinalProof_Call {
	return &ProverInterfaceMock_WaitFinalProof_Call{Call: _e.mock.On("WaitFinalProof", ctx, proofID)}
}

func (_c *ProverInterfaceMock_WaitFinalProof_Call) Run(run func(ctx context.Context, proofID string)) *ProverInterfaceMock_WaitFinalProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProverInterfaceMock_WaitFinalProof_Call) Return(_a0 *prover.FinalProof, _a1 error) *ProverInterfaceMock_WaitFinalProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProverInterfaceMock_WaitFinalProof_Call) RunAndReturn(run func(context.Context, string) (*prover.FinalProof, error)) *ProverInterfaceMock_WaitFinalProof_Call {
	_c.Call.Return(run)
	return _c
}

// WaitRecursiveProof provides a mock function with given fields: ctx, proofID
func (_m *ProverInterfaceMock) WaitRecursiveProof(ctx context.Context, proofID string) (string, common.Hash, error) {
	ret := _m.Called(ctx, proofID)

	if len(ret) == 0 {
		panic("no return value specified for WaitRecursiveProof")
	}

	var r0 string
	var r1 common.Hash
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, common.Hash, error)); ok {
		return rf(ctx, proofID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, proofID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) common.Hash); ok {
		r1 = rf(ctx, proofID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.Hash)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, proofID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProverInterfaceMock_WaitRecursiveProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitRecursiveProof'
type ProverInterfaceMock_WaitRecursiveProof_Call struct {
	*mock.Call
}

// WaitRecursiveProof is a helper method to define mock.On call
//   - ctx context.Context
//   - proofID string
func (_e *ProverInterfaceMock_Expecter) WaitRecursiveProof(ctx interface{}, proofID interface{}) *ProverInterfaceMock_WaitRecursiveProof_Call {
	return &ProverInterfaceMock_WaitRecursiveProof_Call{Call: _e.mock.On("WaitRecursiveProof", ctx, proofID)}
}

func (_c *ProverInterfaceMock_WaitRecursiveProof_Call) Run(run func(ctx context.Context, proofID string)) *ProverInterfaceMock_WaitRecursiveProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProverInterfaceMock_WaitRecursiveProof_Call) Return(_a0 string, _a1 common.Hash, _a2 error) *ProverInterfaceMock_WaitRecursiveProof_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProverInterfaceMock_WaitRecursiveProof_Call) RunAndReturn(run func(context.Context, string) (string, common.Hash, error)) *ProverInterfaceMock_WaitRecursiveProof_Call {
	_c.Call.Return(run)
	return _c
}

// NewProverInterfaceMock creates a new instance of ProverInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProverInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProverInterfaceMock {
	mock := &ProverInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
