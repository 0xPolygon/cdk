// Code generated by mockery v2.39.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	tx "github.com/0xPolygon/agglayer/tx"
)

// AgglayerClientInterfaceMock is an autogenerated mock type for the AgglayerClientInterface type
type AgglayerClientInterfaceMock struct {
	mock.Mock
}

// SendTx provides a mock function with given fields: signedTx
func (_m *AgglayerClientInterfaceMock) SendTx(signedTx tx.SignedTx) (common.Hash, error) {
	ret := _m.Called(signedTx)

	if len(ret) == 0 {
		panic("no return value specified for SendTx")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(tx.SignedTx) (common.Hash, error)); ok {
		return rf(signedTx)
	}
	if rf, ok := ret.Get(0).(func(tx.SignedTx) common.Hash); ok {
		r0 = rf(signedTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(tx.SignedTx) error); ok {
		r1 = rf(signedTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitTxToBeMined provides a mock function with given fields: hash, ctx
func (_m *AgglayerClientInterfaceMock) WaitTxToBeMined(hash common.Hash, ctx context.Context) error {
	ret := _m.Called(hash, ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitTxToBeMined")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Hash, context.Context) error); ok {
		r0 = rf(hash, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAgglayerClientInterfaceMock creates a new instance of AgglayerClientInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgglayerClientInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgglayerClientInterfaceMock {
	mock := &AgglayerClientInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
