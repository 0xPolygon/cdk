// Code generated by mockery v2.39.0. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	ethtxmanager "github.com/0xPolygonHermez/zkevm-ethtx-manager/ethtxmanager"

	kzg4844 "github.com/ethereum/go-ethereum/crypto/kzg4844"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// EthTxManagerClientMock is an autogenerated mock type for the EthTxManagerClient type
type EthTxManagerClientMock struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, to, value, data, gasOffset, sidecar
func (_m *EthTxManagerClientMock) Add(ctx context.Context, to *common.Address, value *big.Int, data []byte, gasOffset uint64, sidecar *types.BlobTxSidecar) (common.Hash, error) {
	ret := _m.Called(ctx, to, value, data, gasOffset, sidecar)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.Address, *big.Int, []byte, uint64, *types.BlobTxSidecar) (common.Hash, error)); ok {
		return rf(ctx, to, value, data, gasOffset, sidecar)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.Address, *big.Int, []byte, uint64, *types.BlobTxSidecar) common.Hash); ok {
		r0 = rf(ctx, to, value, data, gasOffset, sidecar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.Address, *big.Int, []byte, uint64, *types.BlobTxSidecar) error); ok {
		r1 = rf(ctx, to, value, data, gasOffset, sidecar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddWithGas provides a mock function with given fields: ctx, to, value, data, gasOffset, sidecar, gas
func (_m *EthTxManagerClientMock) AddWithGas(ctx context.Context, to *common.Address, value *big.Int, data []byte, gasOffset uint64, sidecar *types.BlobTxSidecar, gas uint64) (common.Hash, error) {
	ret := _m.Called(ctx, to, value, data, gasOffset, sidecar, gas)

	if len(ret) == 0 {
		panic("no return value specified for AddWithGas")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.Address, *big.Int, []byte, uint64, *types.BlobTxSidecar, uint64) (common.Hash, error)); ok {
		return rf(ctx, to, value, data, gasOffset, sidecar, gas)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.Address, *big.Int, []byte, uint64, *types.BlobTxSidecar, uint64) common.Hash); ok {
		r0 = rf(ctx, to, value, data, gasOffset, sidecar, gas)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.Address, *big.Int, []byte, uint64, *types.BlobTxSidecar, uint64) error); ok {
		r1 = rf(ctx, to, value, data, gasOffset, sidecar, gas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncodeBlobData provides a mock function with given fields: data
func (_m *EthTxManagerClientMock) EncodeBlobData(data []byte) (kzg4844.Blob, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for EncodeBlobData")
	}

	var r0 kzg4844.Blob
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (kzg4844.Blob, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) kzg4844.Blob); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kzg4844.Blob)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeBlobSidecar provides a mock function with given fields: blobs
func (_m *EthTxManagerClientMock) MakeBlobSidecar(blobs []kzg4844.Blob) *types.BlobTxSidecar {
	ret := _m.Called(blobs)

	if len(ret) == 0 {
		panic("no return value specified for MakeBlobSidecar")
	}

	var r0 *types.BlobTxSidecar
	if rf, ok := ret.Get(0).(func([]kzg4844.Blob) *types.BlobTxSidecar); ok {
		r0 = rf(blobs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BlobTxSidecar)
		}
	}

	return r0
}

// ProcessPendingMonitoredTxs provides a mock function with given fields: ctx, resultHandler
func (_m *EthTxManagerClientMock) ProcessPendingMonitoredTxs(ctx context.Context, resultHandler ethtxmanager.ResultHandler) {
	_m.Called(ctx, resultHandler)
}

// Remove provides a mock function with given fields: ctx, id
func (_m *EthTxManagerClientMock) Remove(ctx context.Context, id common.Hash) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAll provides a mock function with given fields: ctx
func (_m *EthTxManagerClientMock) RemoveAll(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Result provides a mock function with given fields: ctx, id
func (_m *EthTxManagerClientMock) Result(ctx context.Context, id common.Hash) (ethtxmanager.MonitoredTxResult, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Result")
	}

	var r0 ethtxmanager.MonitoredTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (ethtxmanager.MonitoredTxResult, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) ethtxmanager.MonitoredTxResult); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(ethtxmanager.MonitoredTxResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResultsByStatus provides a mock function with given fields: ctx, statuses
func (_m *EthTxManagerClientMock) ResultsByStatus(ctx context.Context, statuses []ethtxmanager.MonitoredTxStatus) ([]ethtxmanager.MonitoredTxResult, error) {
	ret := _m.Called(ctx, statuses)

	if len(ret) == 0 {
		panic("no return value specified for ResultsByStatus")
	}

	var r0 []ethtxmanager.MonitoredTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []ethtxmanager.MonitoredTxStatus) ([]ethtxmanager.MonitoredTxResult, error)); ok {
		return rf(ctx, statuses)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ethtxmanager.MonitoredTxStatus) []ethtxmanager.MonitoredTxResult); ok {
		r0 = rf(ctx, statuses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ethtxmanager.MonitoredTxResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ethtxmanager.MonitoredTxStatus) error); ok {
		r1 = rf(ctx, statuses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *EthTxManagerClientMock) Start() {
	_m.Called()
}

// Stop provides a mock function with given fields:
func (_m *EthTxManagerClientMock) Stop() {
	_m.Called()
}

// NewEthTxManagerClientMock creates a new instance of EthTxManagerClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthTxManagerClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EthTxManagerClientMock {
	mock := &EthTxManagerClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
