// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	big "math/big"

	claimsponsor "github.com/0xPolygon/cdk/claimsponsor"
	mock "github.com/stretchr/testify/mock"
)

// ClaimSponsorer is an autogenerated mock type for the ClaimSponsorer type
type ClaimSponsorer struct {
	mock.Mock
}

type ClaimSponsorer_Expecter struct {
	mock *mock.Mock
}

func (_m *ClaimSponsorer) EXPECT() *ClaimSponsorer_Expecter {
	return &ClaimSponsorer_Expecter{mock: &_m.Mock}
}

// AddClaimToQueue provides a mock function with given fields: claim
func (_m *ClaimSponsorer) AddClaimToQueue(claim *claimsponsor.Claim) error {
	ret := _m.Called(claim)

	if len(ret) == 0 {
		panic("no return value specified for AddClaimToQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*claimsponsor.Claim) error); ok {
		r0 = rf(claim)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClaimSponsorer_AddClaimToQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClaimToQueue'
type ClaimSponsorer_AddClaimToQueue_Call struct {
	*mock.Call
}

// AddClaimToQueue is a helper method to define mock.On call
//   - claim *claimsponsor.Claim
func (_e *ClaimSponsorer_Expecter) AddClaimToQueue(claim interface{}) *ClaimSponsorer_AddClaimToQueue_Call {
	return &ClaimSponsorer_AddClaimToQueue_Call{Call: _e.mock.On("AddClaimToQueue", claim)}
}

func (_c *ClaimSponsorer_AddClaimToQueue_Call) Run(run func(claim *claimsponsor.Claim)) *ClaimSponsorer_AddClaimToQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*claimsponsor.Claim))
	})
	return _c
}

func (_c *ClaimSponsorer_AddClaimToQueue_Call) Return(_a0 error) *ClaimSponsorer_AddClaimToQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClaimSponsorer_AddClaimToQueue_Call) RunAndReturn(run func(*claimsponsor.Claim) error) *ClaimSponsorer_AddClaimToQueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetClaim provides a mock function with given fields: globalIndex
func (_m *ClaimSponsorer) GetClaim(globalIndex *big.Int) (*claimsponsor.Claim, error) {
	ret := _m.Called(globalIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetClaim")
	}

	var r0 *claimsponsor.Claim
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int) (*claimsponsor.Claim, error)); ok {
		return rf(globalIndex)
	}
	if rf, ok := ret.Get(0).(func(*big.Int) *claimsponsor.Claim); ok {
		r0 = rf(globalIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*claimsponsor.Claim)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(globalIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimSponsorer_GetClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClaim'
type ClaimSponsorer_GetClaim_Call struct {
	*mock.Call
}

// GetClaim is a helper method to define mock.On call
//   - globalIndex *big.Int
func (_e *ClaimSponsorer_Expecter) GetClaim(globalIndex interface{}) *ClaimSponsorer_GetClaim_Call {
	return &ClaimSponsorer_GetClaim_Call{Call: _e.mock.On("GetClaim", globalIndex)}
}

func (_c *ClaimSponsorer_GetClaim_Call) Run(run func(globalIndex *big.Int)) *ClaimSponsorer_GetClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*big.Int))
	})
	return _c
}

func (_c *ClaimSponsorer_GetClaim_Call) Return(_a0 *claimsponsor.Claim, _a1 error) *ClaimSponsorer_GetClaim_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClaimSponsorer_GetClaim_Call) RunAndReturn(run func(*big.Int) (*claimsponsor.Claim, error)) *ClaimSponsorer_GetClaim_Call {
	_c.Call.Return(run)
	return _c
}

// NewClaimSponsorer creates a new instance of ClaimSponsorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClaimSponsorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClaimSponsorer {
	mock := &ClaimSponsorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
