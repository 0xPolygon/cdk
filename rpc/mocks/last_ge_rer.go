// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// LastGERer is an autogenerated mock type for the LastGERer type
type LastGERer struct {
	mock.Mock
}

type LastGERer_Expecter struct {
	mock *mock.Mock
}

func (_m *LastGERer) EXPECT() *LastGERer_Expecter {
	return &LastGERer_Expecter{mock: &_m.Mock}
}

// GetFirstGERAfterL1InfoTreeIndex provides a mock function with given fields: ctx, atOrAfterL1InfoTreeIndex
func (_m *LastGERer) GetFirstGERAfterL1InfoTreeIndex(ctx context.Context, atOrAfterL1InfoTreeIndex uint32) (uint32, common.Hash, error) {
	ret := _m.Called(ctx, atOrAfterL1InfoTreeIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstGERAfterL1InfoTreeIndex")
	}

	var r0 uint32
	var r1 common.Hash
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (uint32, common.Hash, error)); ok {
		return rf(ctx, atOrAfterL1InfoTreeIndex)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) uint32); ok {
		r0 = rf(ctx, atOrAfterL1InfoTreeIndex)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) common.Hash); ok {
		r1 = rf(ctx, atOrAfterL1InfoTreeIndex)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.Hash)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint32) error); ok {
		r2 = rf(ctx, atOrAfterL1InfoTreeIndex)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LastGERer_GetFirstGERAfterL1InfoTreeIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstGERAfterL1InfoTreeIndex'
type LastGERer_GetFirstGERAfterL1InfoTreeIndex_Call struct {
	*mock.Call
}

// GetFirstGERAfterL1InfoTreeIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - atOrAfterL1InfoTreeIndex uint32
func (_e *LastGERer_Expecter) GetFirstGERAfterL1InfoTreeIndex(ctx interface{}, atOrAfterL1InfoTreeIndex interface{}) *LastGERer_GetFirstGERAfterL1InfoTreeIndex_Call {
	return &LastGERer_GetFirstGERAfterL1InfoTreeIndex_Call{Call: _e.mock.On("GetFirstGERAfterL1InfoTreeIndex", ctx, atOrAfterL1InfoTreeIndex)}
}

func (_c *LastGERer_GetFirstGERAfterL1InfoTreeIndex_Call) Run(run func(ctx context.Context, atOrAfterL1InfoTreeIndex uint32)) *LastGERer_GetFirstGERAfterL1InfoTreeIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *LastGERer_GetFirstGERAfterL1InfoTreeIndex_Call) Return(injectedL1InfoTreeIndex uint32, ger common.Hash, err error) *LastGERer_GetFirstGERAfterL1InfoTreeIndex_Call {
	_c.Call.Return(injectedL1InfoTreeIndex, ger, err)
	return _c
}

func (_c *LastGERer_GetFirstGERAfterL1InfoTreeIndex_Call) RunAndReturn(run func(context.Context, uint32) (uint32, common.Hash, error)) *LastGERer_GetFirstGERAfterL1InfoTreeIndex_Call {
	_c.Call.Return(run)
	return _c
}

// NewLastGERer creates a new instance of LastGERer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLastGERer(t interface {
	mock.TestingT
	Cleanup(func())
}) *LastGERer {
	mock := &LastGERer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
