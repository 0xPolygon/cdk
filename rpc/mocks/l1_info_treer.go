// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	l1infotreesync "github.com/0xPolygon/cdk/l1infotreesync"

	mock "github.com/stretchr/testify/mock"

	types "github.com/0xPolygon/cdk/tree/types"
)

// L1InfoTreer is an autogenerated mock type for the L1InfoTreer type
type L1InfoTreer struct {
	mock.Mock
}

type L1InfoTreer_Expecter struct {
	mock *mock.Mock
}

func (_m *L1InfoTreer) EXPECT() *L1InfoTreer_Expecter {
	return &L1InfoTreer_Expecter{mock: &_m.Mock}
}

// GetFirstInfo provides a mock function with given fields:
func (_m *L1InfoTreer) GetFirstInfo() (*l1infotreesync.L1InfoTreeLeaf, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFirstInfo")
	}

	var r0 *l1infotreesync.L1InfoTreeLeaf
	var r1 error
	if rf, ok := ret.Get(0).(func() (*l1infotreesync.L1InfoTreeLeaf, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *l1infotreesync.L1InfoTreeLeaf); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*l1infotreesync.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L1InfoTreer_GetFirstInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstInfo'
type L1InfoTreer_GetFirstInfo_Call struct {
	*mock.Call
}

// GetFirstInfo is a helper method to define mock.On call
func (_e *L1InfoTreer_Expecter) GetFirstInfo() *L1InfoTreer_GetFirstInfo_Call {
	return &L1InfoTreer_GetFirstInfo_Call{Call: _e.mock.On("GetFirstInfo")}
}

func (_c *L1InfoTreer_GetFirstInfo_Call) Run(run func()) *L1InfoTreer_GetFirstInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *L1InfoTreer_GetFirstInfo_Call) Return(_a0 *l1infotreesync.L1InfoTreeLeaf, _a1 error) *L1InfoTreer_GetFirstInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L1InfoTreer_GetFirstInfo_Call) RunAndReturn(run func() (*l1infotreesync.L1InfoTreeLeaf, error)) *L1InfoTreer_GetFirstInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstInfoAfterBlock provides a mock function with given fields: blockNum
func (_m *L1InfoTreer) GetFirstInfoAfterBlock(blockNum uint64) (*l1infotreesync.L1InfoTreeLeaf, error) {
	ret := _m.Called(blockNum)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstInfoAfterBlock")
	}

	var r0 *l1infotreesync.L1InfoTreeLeaf
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*l1infotreesync.L1InfoTreeLeaf, error)); ok {
		return rf(blockNum)
	}
	if rf, ok := ret.Get(0).(func(uint64) *l1infotreesync.L1InfoTreeLeaf); ok {
		r0 = rf(blockNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*l1infotreesync.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(blockNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L1InfoTreer_GetFirstInfoAfterBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstInfoAfterBlock'
type L1InfoTreer_GetFirstInfoAfterBlock_Call struct {
	*mock.Call
}

// GetFirstInfoAfterBlock is a helper method to define mock.On call
//   - blockNum uint64
func (_e *L1InfoTreer_Expecter) GetFirstInfoAfterBlock(blockNum interface{}) *L1InfoTreer_GetFirstInfoAfterBlock_Call {
	return &L1InfoTreer_GetFirstInfoAfterBlock_Call{Call: _e.mock.On("GetFirstInfoAfterBlock", blockNum)}
}

func (_c *L1InfoTreer_GetFirstInfoAfterBlock_Call) Run(run func(blockNum uint64)) *L1InfoTreer_GetFirstInfoAfterBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *L1InfoTreer_GetFirstInfoAfterBlock_Call) Return(_a0 *l1infotreesync.L1InfoTreeLeaf, _a1 error) *L1InfoTreer_GetFirstInfoAfterBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L1InfoTreer_GetFirstInfoAfterBlock_Call) RunAndReturn(run func(uint64) (*l1infotreesync.L1InfoTreeLeaf, error)) *L1InfoTreer_GetFirstInfoAfterBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstL1InfoWithRollupExitRoot provides a mock function with given fields: rollupExitRoot
func (_m *L1InfoTreer) GetFirstL1InfoWithRollupExitRoot(rollupExitRoot common.Hash) (*l1infotreesync.L1InfoTreeLeaf, error) {
	ret := _m.Called(rollupExitRoot)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstL1InfoWithRollupExitRoot")
	}

	var r0 *l1infotreesync.L1InfoTreeLeaf
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) (*l1infotreesync.L1InfoTreeLeaf, error)); ok {
		return rf(rollupExitRoot)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) *l1infotreesync.L1InfoTreeLeaf); ok {
		r0 = rf(rollupExitRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*l1infotreesync.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(rollupExitRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L1InfoTreer_GetFirstL1InfoWithRollupExitRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstL1InfoWithRollupExitRoot'
type L1InfoTreer_GetFirstL1InfoWithRollupExitRoot_Call struct {
	*mock.Call
}

// GetFirstL1InfoWithRollupExitRoot is a helper method to define mock.On call
//   - rollupExitRoot common.Hash
func (_e *L1InfoTreer_Expecter) GetFirstL1InfoWithRollupExitRoot(rollupExitRoot interface{}) *L1InfoTreer_GetFirstL1InfoWithRollupExitRoot_Call {
	return &L1InfoTreer_GetFirstL1InfoWithRollupExitRoot_Call{Call: _e.mock.On("GetFirstL1InfoWithRollupExitRoot", rollupExitRoot)}
}

func (_c *L1InfoTreer_GetFirstL1InfoWithRollupExitRoot_Call) Run(run func(rollupExitRoot common.Hash)) *L1InfoTreer_GetFirstL1InfoWithRollupExitRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Hash))
	})
	return _c
}

func (_c *L1InfoTreer_GetFirstL1InfoWithRollupExitRoot_Call) Return(_a0 *l1infotreesync.L1InfoTreeLeaf, _a1 error) *L1InfoTreer_GetFirstL1InfoWithRollupExitRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L1InfoTreer_GetFirstL1InfoWithRollupExitRoot_Call) RunAndReturn(run func(common.Hash) (*l1infotreesync.L1InfoTreeLeaf, error)) *L1InfoTreer_GetFirstL1InfoWithRollupExitRoot_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstVerifiedBatches provides a mock function with given fields: rollupID
func (_m *L1InfoTreer) GetFirstVerifiedBatches(rollupID uint32) (*l1infotreesync.VerifyBatches, error) {
	ret := _m.Called(rollupID)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstVerifiedBatches")
	}

	var r0 *l1infotreesync.VerifyBatches
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) (*l1infotreesync.VerifyBatches, error)); ok {
		return rf(rollupID)
	}
	if rf, ok := ret.Get(0).(func(uint32) *l1infotreesync.VerifyBatches); ok {
		r0 = rf(rollupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*l1infotreesync.VerifyBatches)
		}
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(rollupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L1InfoTreer_GetFirstVerifiedBatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstVerifiedBatches'
type L1InfoTreer_GetFirstVerifiedBatches_Call struct {
	*mock.Call
}

// GetFirstVerifiedBatches is a helper method to define mock.On call
//   - rollupID uint32
func (_e *L1InfoTreer_Expecter) GetFirstVerifiedBatches(rollupID interface{}) *L1InfoTreer_GetFirstVerifiedBatches_Call {
	return &L1InfoTreer_GetFirstVerifiedBatches_Call{Call: _e.mock.On("GetFirstVerifiedBatches", rollupID)}
}

func (_c *L1InfoTreer_GetFirstVerifiedBatches_Call) Run(run func(rollupID uint32)) *L1InfoTreer_GetFirstVerifiedBatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *L1InfoTreer_GetFirstVerifiedBatches_Call) Return(_a0 *l1infotreesync.VerifyBatches, _a1 error) *L1InfoTreer_GetFirstVerifiedBatches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L1InfoTreer_GetFirstVerifiedBatches_Call) RunAndReturn(run func(uint32) (*l1infotreesync.VerifyBatches, error)) *L1InfoTreer_GetFirstVerifiedBatches_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstVerifiedBatchesAfterBlock provides a mock function with given fields: rollupID, blockNum
func (_m *L1InfoTreer) GetFirstVerifiedBatchesAfterBlock(rollupID uint32, blockNum uint64) (*l1infotreesync.VerifyBatches, error) {
	ret := _m.Called(rollupID, blockNum)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstVerifiedBatchesAfterBlock")
	}

	var r0 *l1infotreesync.VerifyBatches
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32, uint64) (*l1infotreesync.VerifyBatches, error)); ok {
		return rf(rollupID, blockNum)
	}
	if rf, ok := ret.Get(0).(func(uint32, uint64) *l1infotreesync.VerifyBatches); ok {
		r0 = rf(rollupID, blockNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*l1infotreesync.VerifyBatches)
		}
	}

	if rf, ok := ret.Get(1).(func(uint32, uint64) error); ok {
		r1 = rf(rollupID, blockNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L1InfoTreer_GetFirstVerifiedBatchesAfterBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstVerifiedBatchesAfterBlock'
type L1InfoTreer_GetFirstVerifiedBatchesAfterBlock_Call struct {
	*mock.Call
}

// GetFirstVerifiedBatchesAfterBlock is a helper method to define mock.On call
//   - rollupID uint32
//   - blockNum uint64
func (_e *L1InfoTreer_Expecter) GetFirstVerifiedBatchesAfterBlock(rollupID interface{}, blockNum interface{}) *L1InfoTreer_GetFirstVerifiedBatchesAfterBlock_Call {
	return &L1InfoTreer_GetFirstVerifiedBatchesAfterBlock_Call{Call: _e.mock.On("GetFirstVerifiedBatchesAfterBlock", rollupID, blockNum)}
}

func (_c *L1InfoTreer_GetFirstVerifiedBatchesAfterBlock_Call) Run(run func(rollupID uint32, blockNum uint64)) *L1InfoTreer_GetFirstVerifiedBatchesAfterBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32), args[1].(uint64))
	})
	return _c
}

func (_c *L1InfoTreer_GetFirstVerifiedBatchesAfterBlock_Call) Return(_a0 *l1infotreesync.VerifyBatches, _a1 error) *L1InfoTreer_GetFirstVerifiedBatchesAfterBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L1InfoTreer_GetFirstVerifiedBatchesAfterBlock_Call) RunAndReturn(run func(uint32, uint64) (*l1infotreesync.VerifyBatches, error)) *L1InfoTreer_GetFirstVerifiedBatchesAfterBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetInfoByIndex provides a mock function with given fields: ctx, index
func (_m *L1InfoTreer) GetInfoByIndex(ctx context.Context, index uint32) (*l1infotreesync.L1InfoTreeLeaf, error) {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for GetInfoByIndex")
	}

	var r0 *l1infotreesync.L1InfoTreeLeaf
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (*l1infotreesync.L1InfoTreeLeaf, error)); ok {
		return rf(ctx, index)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *l1infotreesync.L1InfoTreeLeaf); ok {
		r0 = rf(ctx, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*l1infotreesync.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L1InfoTreer_GetInfoByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInfoByIndex'
type L1InfoTreer_GetInfoByIndex_Call struct {
	*mock.Call
}

// GetInfoByIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - index uint32
func (_e *L1InfoTreer_Expecter) GetInfoByIndex(ctx interface{}, index interface{}) *L1InfoTreer_GetInfoByIndex_Call {
	return &L1InfoTreer_GetInfoByIndex_Call{Call: _e.mock.On("GetInfoByIndex", ctx, index)}
}

func (_c *L1InfoTreer_GetInfoByIndex_Call) Run(run func(ctx context.Context, index uint32)) *L1InfoTreer_GetInfoByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *L1InfoTreer_GetInfoByIndex_Call) Return(_a0 *l1infotreesync.L1InfoTreeLeaf, _a1 error) *L1InfoTreer_GetInfoByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L1InfoTreer_GetInfoByIndex_Call) RunAndReturn(run func(context.Context, uint32) (*l1infotreesync.L1InfoTreeLeaf, error)) *L1InfoTreer_GetInfoByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastInfo provides a mock function with given fields:
func (_m *L1InfoTreer) GetLastInfo() (*l1infotreesync.L1InfoTreeLeaf, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastInfo")
	}

	var r0 *l1infotreesync.L1InfoTreeLeaf
	var r1 error
	if rf, ok := ret.Get(0).(func() (*l1infotreesync.L1InfoTreeLeaf, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *l1infotreesync.L1InfoTreeLeaf); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*l1infotreesync.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L1InfoTreer_GetLastInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastInfo'
type L1InfoTreer_GetLastInfo_Call struct {
	*mock.Call
}

// GetLastInfo is a helper method to define mock.On call
func (_e *L1InfoTreer_Expecter) GetLastInfo() *L1InfoTreer_GetLastInfo_Call {
	return &L1InfoTreer_GetLastInfo_Call{Call: _e.mock.On("GetLastInfo")}
}

func (_c *L1InfoTreer_GetLastInfo_Call) Run(run func()) *L1InfoTreer_GetLastInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *L1InfoTreer_GetLastInfo_Call) Return(_a0 *l1infotreesync.L1InfoTreeLeaf, _a1 error) *L1InfoTreer_GetLastInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L1InfoTreer_GetLastInfo_Call) RunAndReturn(run func() (*l1infotreesync.L1InfoTreeLeaf, error)) *L1InfoTreer_GetLastInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastVerifiedBatches provides a mock function with given fields: rollupID
func (_m *L1InfoTreer) GetLastVerifiedBatches(rollupID uint32) (*l1infotreesync.VerifyBatches, error) {
	ret := _m.Called(rollupID)

	if len(ret) == 0 {
		panic("no return value specified for GetLastVerifiedBatches")
	}

	var r0 *l1infotreesync.VerifyBatches
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) (*l1infotreesync.VerifyBatches, error)); ok {
		return rf(rollupID)
	}
	if rf, ok := ret.Get(0).(func(uint32) *l1infotreesync.VerifyBatches); ok {
		r0 = rf(rollupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*l1infotreesync.VerifyBatches)
		}
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(rollupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L1InfoTreer_GetLastVerifiedBatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastVerifiedBatches'
type L1InfoTreer_GetLastVerifiedBatches_Call struct {
	*mock.Call
}

// GetLastVerifiedBatches is a helper method to define mock.On call
//   - rollupID uint32
func (_e *L1InfoTreer_Expecter) GetLastVerifiedBatches(rollupID interface{}) *L1InfoTreer_GetLastVerifiedBatches_Call {
	return &L1InfoTreer_GetLastVerifiedBatches_Call{Call: _e.mock.On("GetLastVerifiedBatches", rollupID)}
}

func (_c *L1InfoTreer_GetLastVerifiedBatches_Call) Run(run func(rollupID uint32)) *L1InfoTreer_GetLastVerifiedBatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *L1InfoTreer_GetLastVerifiedBatches_Call) Return(_a0 *l1infotreesync.VerifyBatches, _a1 error) *L1InfoTreer_GetLastVerifiedBatches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L1InfoTreer_GetLastVerifiedBatches_Call) RunAndReturn(run func(uint32) (*l1infotreesync.VerifyBatches, error)) *L1InfoTreer_GetLastVerifiedBatches_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocalExitRoot provides a mock function with given fields: ctx, networkID, rollupExitRoot
func (_m *L1InfoTreer) GetLocalExitRoot(ctx context.Context, networkID uint32, rollupExitRoot common.Hash) (common.Hash, error) {
	ret := _m.Called(ctx, networkID, rollupExitRoot)

	if len(ret) == 0 {
		panic("no return value specified for GetLocalExitRoot")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Hash) (common.Hash, error)); ok {
		return rf(ctx, networkID, rollupExitRoot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Hash) common.Hash); ok {
		r0 = rf(ctx, networkID, rollupExitRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, common.Hash) error); ok {
		r1 = rf(ctx, networkID, rollupExitRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L1InfoTreer_GetLocalExitRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalExitRoot'
type L1InfoTreer_GetLocalExitRoot_Call struct {
	*mock.Call
}

// GetLocalExitRoot is a helper method to define mock.On call
//   - ctx context.Context
//   - networkID uint32
//   - rollupExitRoot common.Hash
func (_e *L1InfoTreer_Expecter) GetLocalExitRoot(ctx interface{}, networkID interface{}, rollupExitRoot interface{}) *L1InfoTreer_GetLocalExitRoot_Call {
	return &L1InfoTreer_GetLocalExitRoot_Call{Call: _e.mock.On("GetLocalExitRoot", ctx, networkID, rollupExitRoot)}
}

func (_c *L1InfoTreer_GetLocalExitRoot_Call) Run(run func(ctx context.Context, networkID uint32, rollupExitRoot common.Hash)) *L1InfoTreer_GetLocalExitRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(common.Hash))
	})
	return _c
}

func (_c *L1InfoTreer_GetLocalExitRoot_Call) Return(_a0 common.Hash, _a1 error) *L1InfoTreer_GetLocalExitRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L1InfoTreer_GetLocalExitRoot_Call) RunAndReturn(run func(context.Context, uint32, common.Hash) (common.Hash, error)) *L1InfoTreer_GetLocalExitRoot_Call {
	_c.Call.Return(run)
	return _c
}

// GetRollupExitTreeMerkleProof provides a mock function with given fields: ctx, networkID, root
func (_m *L1InfoTreer) GetRollupExitTreeMerkleProof(ctx context.Context, networkID uint32, root common.Hash) (types.Proof, error) {
	ret := _m.Called(ctx, networkID, root)

	if len(ret) == 0 {
		panic("no return value specified for GetRollupExitTreeMerkleProof")
	}

	var r0 types.Proof
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Hash) (types.Proof, error)); ok {
		return rf(ctx, networkID, root)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Hash) types.Proof); ok {
		r0 = rf(ctx, networkID, root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Proof)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, common.Hash) error); ok {
		r1 = rf(ctx, networkID, root)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L1InfoTreer_GetRollupExitTreeMerkleProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRollupExitTreeMerkleProof'
type L1InfoTreer_GetRollupExitTreeMerkleProof_Call struct {
	*mock.Call
}

// GetRollupExitTreeMerkleProof is a helper method to define mock.On call
//   - ctx context.Context
//   - networkID uint32
//   - root common.Hash
func (_e *L1InfoTreer_Expecter) GetRollupExitTreeMerkleProof(ctx interface{}, networkID interface{}, root interface{}) *L1InfoTreer_GetRollupExitTreeMerkleProof_Call {
	return &L1InfoTreer_GetRollupExitTreeMerkleProof_Call{Call: _e.mock.On("GetRollupExitTreeMerkleProof", ctx, networkID, root)}
}

func (_c *L1InfoTreer_GetRollupExitTreeMerkleProof_Call) Run(run func(ctx context.Context, networkID uint32, root common.Hash)) *L1InfoTreer_GetRollupExitTreeMerkleProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(common.Hash))
	})
	return _c
}

func (_c *L1InfoTreer_GetRollupExitTreeMerkleProof_Call) Return(_a0 types.Proof, _a1 error) *L1InfoTreer_GetRollupExitTreeMerkleProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L1InfoTreer_GetRollupExitTreeMerkleProof_Call) RunAndReturn(run func(context.Context, uint32, common.Hash) (types.Proof, error)) *L1InfoTreer_GetRollupExitTreeMerkleProof_Call {
	_c.Call.Return(run)
	return _c
}

// NewL1InfoTreer creates a new instance of L1InfoTreer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewL1InfoTreer(t interface {
	mock.TestingT
	Cleanup(func())
}) *L1InfoTreer {
	mock := &L1InfoTreer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
