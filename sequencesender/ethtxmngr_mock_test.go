// Code generated by mockery v2.40.1. DO NOT EDIT.

package sequencesender

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	ethtxmanager "github.com/0xPolygonHermez/zkevm-ethtx-manager/ethtxmanager"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// EthTxMngrMock is an autogenerated mock type for the EthTxMngr type
type EthTxMngrMock struct {
	mock.Mock
}

type EthTxMngrMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EthTxMngrMock) EXPECT() *EthTxMngrMock_Expecter {
	return &EthTxMngrMock_Expecter{mock: &_m.Mock}
}

// AddWithGas provides a mock function with given fields: ctx, to, forcedNonce, value, data, gasOffset, sidecar, gas
func (_m *EthTxMngrMock) AddWithGas(ctx context.Context, to *common.Address, forcedNonce *uint64, value *big.Int, data []byte, gasOffset uint64, sidecar *types.BlobTxSidecar, gas uint64) (common.Hash, error) {
	ret := _m.Called(ctx, to, forcedNonce, value, data, gasOffset, sidecar, gas)

	if len(ret) == 0 {
		panic("no return value specified for AddWithGas")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.Address, *uint64, *big.Int, []byte, uint64, *types.BlobTxSidecar, uint64) (common.Hash, error)); ok {
		return rf(ctx, to, forcedNonce, value, data, gasOffset, sidecar, gas)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.Address, *uint64, *big.Int, []byte, uint64, *types.BlobTxSidecar, uint64) common.Hash); ok {
		r0 = rf(ctx, to, forcedNonce, value, data, gasOffset, sidecar, gas)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.Address, *uint64, *big.Int, []byte, uint64, *types.BlobTxSidecar, uint64) error); ok {
		r1 = rf(ctx, to, forcedNonce, value, data, gasOffset, sidecar, gas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthTxMngrMock_AddWithGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWithGas'
type EthTxMngrMock_AddWithGas_Call struct {
	*mock.Call
}

// AddWithGas is a helper method to define mock.On call
//   - ctx context.Context
//   - to *common.Address
//   - forcedNonce *uint64
//   - value *big.Int
//   - data []byte
//   - gasOffset uint64
//   - sidecar *types.BlobTxSidecar
//   - gas uint64
func (_e *EthTxMngrMock_Expecter) AddWithGas(ctx interface{}, to interface{}, forcedNonce interface{}, value interface{}, data interface{}, gasOffset interface{}, sidecar interface{}, gas interface{}) *EthTxMngrMock_AddWithGas_Call {
	return &EthTxMngrMock_AddWithGas_Call{Call: _e.mock.On("AddWithGas", ctx, to, forcedNonce, value, data, gasOffset, sidecar, gas)}
}

func (_c *EthTxMngrMock_AddWithGas_Call) Run(run func(ctx context.Context, to *common.Address, forcedNonce *uint64, value *big.Int, data []byte, gasOffset uint64, sidecar *types.BlobTxSidecar, gas uint64)) *EthTxMngrMock_AddWithGas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*common.Address), args[2].(*uint64), args[3].(*big.Int), args[4].([]byte), args[5].(uint64), args[6].(*types.BlobTxSidecar), args[7].(uint64))
	})
	return _c
}

func (_c *EthTxMngrMock_AddWithGas_Call) Return(_a0 common.Hash, _a1 error) *EthTxMngrMock_AddWithGas_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthTxMngrMock_AddWithGas_Call) RunAndReturn(run func(context.Context, *common.Address, *uint64, *big.Int, []byte, uint64, *types.BlobTxSidecar, uint64) (common.Hash, error)) *EthTxMngrMock_AddWithGas_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, hash
func (_m *EthTxMngrMock) Remove(ctx context.Context, hash common.Hash) error {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) error); ok {
		r0 = rf(ctx, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EthTxMngrMock_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type EthTxMngrMock_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - hash common.Hash
func (_e *EthTxMngrMock_Expecter) Remove(ctx interface{}, hash interface{}) *EthTxMngrMock_Remove_Call {
	return &EthTxMngrMock_Remove_Call{Call: _e.mock.On("Remove", ctx, hash)}
}

func (_c *EthTxMngrMock_Remove_Call) Run(run func(ctx context.Context, hash common.Hash)) *EthTxMngrMock_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *EthTxMngrMock_Remove_Call) Return(_a0 error) *EthTxMngrMock_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EthTxMngrMock_Remove_Call) RunAndReturn(run func(context.Context, common.Hash) error) *EthTxMngrMock_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Result provides a mock function with given fields: ctx, hash
func (_m *EthTxMngrMock) Result(ctx context.Context, hash common.Hash) (ethtxmanager.MonitoredTxResult, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for Result")
	}

	var r0 ethtxmanager.MonitoredTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (ethtxmanager.MonitoredTxResult, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) ethtxmanager.MonitoredTxResult); ok {
		r0 = rf(ctx, hash)
	} else {
		r0 = ret.Get(0).(ethtxmanager.MonitoredTxResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthTxMngrMock_Result_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Result'
type EthTxMngrMock_Result_Call struct {
	*mock.Call
}

// Result is a helper method to define mock.On call
//   - ctx context.Context
//   - hash common.Hash
func (_e *EthTxMngrMock_Expecter) Result(ctx interface{}, hash interface{}) *EthTxMngrMock_Result_Call {
	return &EthTxMngrMock_Result_Call{Call: _e.mock.On("Result", ctx, hash)}
}

func (_c *EthTxMngrMock_Result_Call) Run(run func(ctx context.Context, hash common.Hash)) *EthTxMngrMock_Result_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *EthTxMngrMock_Result_Call) Return(_a0 ethtxmanager.MonitoredTxResult, _a1 error) *EthTxMngrMock_Result_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthTxMngrMock_Result_Call) RunAndReturn(run func(context.Context, common.Hash) (ethtxmanager.MonitoredTxResult, error)) *EthTxMngrMock_Result_Call {
	_c.Call.Return(run)
	return _c
}

// ResultsByStatus provides a mock function with given fields: ctx, status
func (_m *EthTxMngrMock) ResultsByStatus(ctx context.Context, status []ethtxmanager.MonitoredTxStatus) ([]ethtxmanager.MonitoredTxResult, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for ResultsByStatus")
	}

	var r0 []ethtxmanager.MonitoredTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []ethtxmanager.MonitoredTxStatus) ([]ethtxmanager.MonitoredTxResult, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ethtxmanager.MonitoredTxStatus) []ethtxmanager.MonitoredTxResult); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ethtxmanager.MonitoredTxResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ethtxmanager.MonitoredTxStatus) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthTxMngrMock_ResultsByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResultsByStatus'
type EthTxMngrMock_ResultsByStatus_Call struct {
	*mock.Call
}

// ResultsByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status []ethtxmanager.MonitoredTxStatus
func (_e *EthTxMngrMock_Expecter) ResultsByStatus(ctx interface{}, status interface{}) *EthTxMngrMock_ResultsByStatus_Call {
	return &EthTxMngrMock_ResultsByStatus_Call{Call: _e.mock.On("ResultsByStatus", ctx, status)}
}

func (_c *EthTxMngrMock_ResultsByStatus_Call) Run(run func(ctx context.Context, status []ethtxmanager.MonitoredTxStatus)) *EthTxMngrMock_ResultsByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ethtxmanager.MonitoredTxStatus))
	})
	return _c
}

func (_c *EthTxMngrMock_ResultsByStatus_Call) Return(_a0 []ethtxmanager.MonitoredTxResult, _a1 error) *EthTxMngrMock_ResultsByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthTxMngrMock_ResultsByStatus_Call) RunAndReturn(run func(context.Context, []ethtxmanager.MonitoredTxStatus) ([]ethtxmanager.MonitoredTxResult, error)) *EthTxMngrMock_ResultsByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *EthTxMngrMock) Start() {
	_m.Called()
}

// EthTxMngrMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type EthTxMngrMock_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *EthTxMngrMock_Expecter) Start() *EthTxMngrMock_Start_Call {
	return &EthTxMngrMock_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *EthTxMngrMock_Start_Call) Run(run func()) *EthTxMngrMock_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EthTxMngrMock_Start_Call) Return() *EthTxMngrMock_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *EthTxMngrMock_Start_Call) RunAndReturn(run func()) *EthTxMngrMock_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewEthTxMngrMock creates a new instance of EthTxMngrMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthTxMngrMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EthTxMngrMock {
	mock := &EthTxMngrMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
