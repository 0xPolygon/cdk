// Code generated by mockery. DO NOT EDIT.

package mocks_txbuilder

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	polygonvalidiumetrog "github.com/0xPolygon/cdk-contracts-tooling/contracts/elderberry/polygonvalidiumetrog"

	types "github.com/ethereum/go-ethereum/core/types"
)

// RollupElderberryZKEVMContractor is an autogenerated mock type for the rollupElderberryZKEVMContractor type
type RollupElderberryZKEVMContractor struct {
	mock.Mock
}

type RollupElderberryZKEVMContractor_Expecter struct {
	mock *mock.Mock
}

func (_m *RollupElderberryZKEVMContractor) EXPECT() *RollupElderberryZKEVMContractor_Expecter {
	return &RollupElderberryZKEVMContractor_Expecter{mock: &_m.Mock}
}

// SequenceBatches provides a mock function with given fields: opts, batches, maxSequenceTimestamp, initSequencedBatch, l2Coinbase
func (_m *RollupElderberryZKEVMContractor) SequenceBatches(opts *bind.TransactOpts, batches []polygonvalidiumetrog.PolygonRollupBaseEtrogBatchData, maxSequenceTimestamp uint64, initSequencedBatch uint64, l2Coinbase common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, batches, maxSequenceTimestamp, initSequencedBatch, l2Coinbase)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, []polygonvalidiumetrog.PolygonRollupBaseEtrogBatchData, uint64, uint64, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, batches, maxSequenceTimestamp, initSequencedBatch, l2Coinbase)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, []polygonvalidiumetrog.PolygonRollupBaseEtrogBatchData, uint64, uint64, common.Address) *types.Transaction); ok {
		r0 = rf(opts, batches, maxSequenceTimestamp, initSequencedBatch, l2Coinbase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, []polygonvalidiumetrog.PolygonRollupBaseEtrogBatchData, uint64, uint64, common.Address) error); ok {
		r1 = rf(opts, batches, maxSequenceTimestamp, initSequencedBatch, l2Coinbase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollupElderberryZKEVMContractor_SequenceBatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SequenceBatches'
type RollupElderberryZKEVMContractor_SequenceBatches_Call struct {
	*mock.Call
}

// SequenceBatches is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - batches []polygonvalidiumetrog.PolygonRollupBaseEtrogBatchData
//   - maxSequenceTimestamp uint64
//   - initSequencedBatch uint64
//   - l2Coinbase common.Address
func (_e *RollupElderberryZKEVMContractor_Expecter) SequenceBatches(opts interface{}, batches interface{}, maxSequenceTimestamp interface{}, initSequencedBatch interface{}, l2Coinbase interface{}) *RollupElderberryZKEVMContractor_SequenceBatches_Call {
	return &RollupElderberryZKEVMContractor_SequenceBatches_Call{Call: _e.mock.On("SequenceBatches", opts, batches, maxSequenceTimestamp, initSequencedBatch, l2Coinbase)}
}

func (_c *RollupElderberryZKEVMContractor_SequenceBatches_Call) Run(run func(opts *bind.TransactOpts, batches []polygonvalidiumetrog.PolygonRollupBaseEtrogBatchData, maxSequenceTimestamp uint64, initSequencedBatch uint64, l2Coinbase common.Address)) *RollupElderberryZKEVMContractor_SequenceBatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].([]polygonvalidiumetrog.PolygonRollupBaseEtrogBatchData), args[2].(uint64), args[3].(uint64), args[4].(common.Address))
	})
	return _c
}

func (_c *RollupElderberryZKEVMContractor_SequenceBatches_Call) Return(_a0 *types.Transaction, _a1 error) *RollupElderberryZKEVMContractor_SequenceBatches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RollupElderberryZKEVMContractor_SequenceBatches_Call) RunAndReturn(run func(*bind.TransactOpts, []polygonvalidiumetrog.PolygonRollupBaseEtrogBatchData, uint64, uint64, common.Address) (*types.Transaction, error)) *RollupElderberryZKEVMContractor_SequenceBatches_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRollupElderberryZKEVMContractor interface {
	mock.TestingT
	Cleanup(func())
}

// NewRollupElderberryZKEVMContractor creates a new instance of RollupElderberryZKEVMContractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRollupElderberryZKEVMContractor(t mockConstructorTestingTNewRollupElderberryZKEVMContractor) *RollupElderberryZKEVMContractor {
	mock := &RollupElderberryZKEVMContractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
