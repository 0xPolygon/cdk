// Code generated by mockery. DO NOT EDIT.

package mocks_txbuilder

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	mock "github.com/stretchr/testify/mock"
)

// GlobalExitRootBananaContractor is an autogenerated mock type for the globalExitRootBananaContractor type
type GlobalExitRootBananaContractor struct {
	mock.Mock
}

type GlobalExitRootBananaContractor_Expecter struct {
	mock *mock.Mock
}

func (_m *GlobalExitRootBananaContractor) EXPECT() *GlobalExitRootBananaContractor_Expecter {
	return &GlobalExitRootBananaContractor_Expecter{mock: &_m.Mock}
}

// L1InfoRootMap provides a mock function with given fields: opts, index
func (_m *GlobalExitRootBananaContractor) L1InfoRootMap(opts *bind.CallOpts, index uint32) ([32]byte, error) {
	ret := _m.Called(opts, index)

	if len(ret) == 0 {
		panic("no return value specified for L1InfoRootMap")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, uint32) ([32]byte, error)); ok {
		return rf(opts, index)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, uint32) [32]byte); ok {
		r0 = rf(opts, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, uint32) error); ok {
		r1 = rf(opts, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalExitRootBananaContractor_L1InfoRootMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'L1InfoRootMap'
type GlobalExitRootBananaContractor_L1InfoRootMap_Call struct {
	*mock.Call
}

// L1InfoRootMap is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - index uint32
func (_e *GlobalExitRootBananaContractor_Expecter) L1InfoRootMap(opts interface{}, index interface{}) *GlobalExitRootBananaContractor_L1InfoRootMap_Call {
	return &GlobalExitRootBananaContractor_L1InfoRootMap_Call{Call: _e.mock.On("L1InfoRootMap", opts, index)}
}

func (_c *GlobalExitRootBananaContractor_L1InfoRootMap_Call) Run(run func(opts *bind.CallOpts, index uint32)) *GlobalExitRootBananaContractor_L1InfoRootMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(uint32))
	})
	return _c
}

func (_c *GlobalExitRootBananaContractor_L1InfoRootMap_Call) Return(_a0 [32]byte, _a1 error) *GlobalExitRootBananaContractor_L1InfoRootMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GlobalExitRootBananaContractor_L1InfoRootMap_Call) RunAndReturn(run func(*bind.CallOpts, uint32) ([32]byte, error)) *GlobalExitRootBananaContractor_L1InfoRootMap_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *GlobalExitRootBananaContractor) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GlobalExitRootBananaContractor_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type GlobalExitRootBananaContractor_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *GlobalExitRootBananaContractor_Expecter) String() *GlobalExitRootBananaContractor_String_Call {
	return &GlobalExitRootBananaContractor_String_Call{Call: _e.mock.On("String")}
}

func (_c *GlobalExitRootBananaContractor_String_Call) Run(run func()) *GlobalExitRootBananaContractor_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GlobalExitRootBananaContractor_String_Call) Return(_a0 string) *GlobalExitRootBananaContractor_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GlobalExitRootBananaContractor_String_Call) RunAndReturn(run func() string) *GlobalExitRootBananaContractor_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewGlobalExitRootBananaContractor creates a new instance of GlobalExitRootBananaContractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGlobalExitRootBananaContractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *GlobalExitRootBananaContractor {
	mock := &GlobalExitRootBananaContractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
