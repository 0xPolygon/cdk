// Code generated by mockery. DO NOT EDIT.

package mocks_bridgesync

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BridgeContractor is an autogenerated mock type for the BridgeContractor type
type BridgeContractor struct {
	mock.Mock
}

type BridgeContractor_Expecter struct {
	mock *mock.Mock
}

func (_m *BridgeContractor) EXPECT() *BridgeContractor_Expecter {
	return &BridgeContractor_Expecter{mock: &_m.Mock}
}

// LastUpdatedDepositCount provides a mock function with given fields: ctx, BlockNumber
func (_m *BridgeContractor) LastUpdatedDepositCount(ctx context.Context, BlockNumber uint64) (uint32, error) {
	ret := _m.Called(ctx, BlockNumber)

	if len(ret) == 0 {
		panic("no return value specified for LastUpdatedDepositCount")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (uint32, error)); ok {
		return rf(ctx, BlockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) uint32); ok {
		r0 = rf(ctx, BlockNumber)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, BlockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BridgeContractor_LastUpdatedDepositCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastUpdatedDepositCount'
type BridgeContractor_LastUpdatedDepositCount_Call struct {
	*mock.Call
}

// LastUpdatedDepositCount is a helper method to define mock.On call
//   - ctx context.Context
//   - BlockNumber uint64
func (_e *BridgeContractor_Expecter) LastUpdatedDepositCount(ctx interface{}, BlockNumber interface{}) *BridgeContractor_LastUpdatedDepositCount_Call {
	return &BridgeContractor_LastUpdatedDepositCount_Call{Call: _e.mock.On("LastUpdatedDepositCount", ctx, BlockNumber)}
}

func (_c *BridgeContractor_LastUpdatedDepositCount_Call) Run(run func(ctx context.Context, BlockNumber uint64)) *BridgeContractor_LastUpdatedDepositCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *BridgeContractor_LastUpdatedDepositCount_Call) Return(_a0 uint32, _a1 error) *BridgeContractor_LastUpdatedDepositCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BridgeContractor_LastUpdatedDepositCount_Call) RunAndReturn(run func(context.Context, uint64) (uint32, error)) *BridgeContractor_LastUpdatedDepositCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewBridgeContractor creates a new instance of BridgeContractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBridgeContractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *BridgeContractor {
	mock := &BridgeContractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
